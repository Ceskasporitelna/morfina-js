{"version":3,"sources":["webpack:///morfina-js.sfx.min.js","webpack:///webpack/bootstrap 8ce335e71641948134c3","webpack:///./src/index.ts","webpack:///./lib/paillier.js","webpack:///./~/jsbn/index.js","webpack:///./lib/jsbn/rng.js"],"names":["MorfinaJS","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","Object","defineProperty","value","num","console","log","lcm","a","b","multiply","divide","gcd","BigInteger","SecureRandom","paillier","publicKey","bits","n","this","n2","square","np1","add","ONE","rncache","Array","privateKey","lambda","pubkey","x","modPow","subtract","modInverse","generateKeys","modulusbits","q","keys","rng","isProbablePrime","testBit","compareTo","pub","sec","prototype","encrypt","randomize","mod","remainder","mult","rn","length","pop","getRN","r","precompute","i","push","decrypt","fromNumber","fromString","nbi","am1","w","j","v","Math","floor","am2","xl","xh","l","h","am3","int2char","BI_RM","charAt","intAt","s","BI_RC","charCodeAt","bnpCopyTo","t","bnpFromInt","DV","nbv","fromInt","bnpFromString","k","fromRadix","mi","sh","DB","clamp","ZERO","subTo","bnpClamp","DM","bnToString","negate","toString","toRadix","d","km","bnNegate","bnAbs","bnCompareTo","nbits","bnBitLength","bnpDLShiftTo","bnpDRShiftTo","max","bnpLShiftTo","bs","cbs","bm","ds","bnpRShiftTo","bnpSubTo","min","bnpMultiplyTo","abs","y","am","bnpSquareTo","bnpDivRemTo","pm","pt","copyTo","ts","ms","nsh","lShiftTo","ys","y0","yt","F1","F2","d1","FV","d2","e","dlShiftTo","qd","drShiftTo","rShiftTo","bnMod","divRemTo","Classic","cConvert","cRevert","cReduce","cMulTo","multiplyTo","reduce","cSqrTo","squareTo","bnpInvDigit","Montgomery","mp","invDigit","mpl","mph","um","mt2","montConvert","montRevert","montReduce","u0","montSqrTo","montMulTo","bnpIsEven","bnpExp","z","r2","g","convert","sqrTo","mulTo","revert","bnModPowInt","isEven","exp","bnClone","bnIntValue","bnByteValue","bnShortValue","bnpChunkSize","LN2","bnSigNum","bnpToRadix","signum","cs","chunkSize","pow","intValue","substr","bnpFromRadix","dMultiply","dAddOffset","bnpFromNumber","bitwiseTo","shiftLeft","op_or","bitLength","nextBytes","bnToByteArray","bnEquals","bnMin","bnMax","bnpBitwiseTo","op","f","op_and","bnAnd","bnOr","op_xor","bnXor","op_andnot","bnAndNot","bnNot","bnShiftLeft","bnShiftRight","lbit","bnGetLowestSetBit","cbit","bnBitCount","bnTestBit","bnpChangeBit","bnSetBit","changeBit","bnClearBit","bnFlipBit","bnpAddTo","bnAdd","addTo","bnSubtract","bnMultiply","bnSquare","bnDivide","bnRemainder","bnDivideAndRemainder","bnpDMultiply","bnpDAddOffset","NullExp","nNop","nMulTo","nSqrTo","bnPow","bnpMultiplyLowerTo","bnpMultiplyUpperTo","Barrett","q3","mu","barrettConvert","barrettRevert","barrettReduce","multiplyUpperTo","multiplyLowerTo","barrettSqrTo","barrettMulTo","bnModPow","k1","g2","is1","bnGCD","clone","getLowestSetBit","bnpModInt","bnModInverse","ac","u","bnIsProbablePrime","lowprimes","lplim","modInt","millerRabin","bnpMillerRabin","n1","shiftRight","random","modPowInt","rng_seed_int","rng_pool","rng_pptr","rng_psize","rng_seed_time","Date","getTime","rng_get_byte","rng_state","prng_newstate","init","next","rng_get_bytes","ba","Arcfour","S","ARC4init","key","ARC4next","dbits","canary","j_lm","inBrowser","navigator","appName","BI_FP","rr","vv","byteValue","shortValue","toByteArray","equals","and","or","xor","andNot","not","bitCount","setBit","clearBit","flipBit","divideAndRemainder","window","crypto","getRandomValues","ua","Uint8Array","appVersion"],"mappings":"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","file":"morfina-js.sfx.min.js","sourcesContent":["var MorfinaJS =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar p = __webpack_require__(1);\n\texports.num = 3;\n\tconsole.log('paillier', p);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t////////////////////////////////////////////////////////////////////////////////////\n\t//\n\t// paillier.js: a simple proof-of-concept Javascript implementation of the\n\t// Paillier homomorphic encryption system.\n\t//\n\t// Author: Maarten H. Everts (TNO)\n\t//\n\t// Dependencies: jsbn, from http://www-cs-students.stanford.edu/~tjw/jsbn/\n\t//  (you will need at least jsbn.js, jsbn2.js, prng4.js, and rng.js)\n\t// See the demo page on how to use it.\n\t//\n\t////////////////////////////////////////////////////////////////////////////////////\n\tvar BigInteger = __webpack_require__(2).BigInteger;\n\t\n\tvar SecureRandom = __webpack_require__(3);\n\t\n\tfunction lcm(a,b) {\n\t  return a.multiply(b).divide(a.gcd(b));\n\t}\n\t\n\tpaillier = {\n\t\tpublicKey: function(bits, n) {\n\t\t\t// bits\n\t\t\tthis.bits = bits;\n\t\t\t// n\n\t\t\tthis.n = n;\n\t\t\t// n2 (cached n^2)\n\t\t\tthis.n2 = n.square();\n\t\t\t// np1 (cached n+1)\n\t\t\tthis.np1 = n.add(BigInteger.ONE);\n\t\t\tthis.rncache = new Array();\n\t\t},\n\t\tprivateKey: function(lambda, pubkey) {\n\t\t\t// lambda\n\t\t\tthis.lambda = lambda;\n\t\t\tthis.pubkey = pubkey;\n\t\t\t// x (cached) for decryption\n\t\t\tthis.x = pubkey.np1.modPow(this.lambda,pubkey.n2).subtract(BigInteger.ONE).divide(pubkey.n).modInverse(pubkey.n);\n\t\t},\n\t\tgenerateKeys: function(modulusbits) {\n\t\t\tvar p, q, n, keys = {}, rng = new SecureRandom();\n\t\t\tdo {\n\t\t\t\tdo {\n\t\t\t\t\tp = new BigInteger(modulusbits>>1,1,rng);\n\t\t\t\t} while (!p.isProbablePrime(10));\n\t\n\t\t\t\tdo {\n\t\t\t\t\tq = new BigInteger(modulusbits>>1,1,rng);\n\t\t\t\t} while(!q.isProbablePrime(10));\n\t\n\t\t\t\tn = p.multiply(q);\n\t\t\t} while(!(n.testBit(modulusbits - 1)) || (p.compareTo(q) == 0));\n\t\t\tkeys.pub = new paillier.publicKey(modulusbits,n);\n\t\t\tlambda = lcm(p.subtract(BigInteger.ONE),q.subtract(BigInteger.ONE));\n\t\t\tkeys.sec = new paillier.privateKey(lambda, keys.pub);\n\t\t\treturn keys;\n\t\t}\n\t}\n\t\n\t\n\tpaillier.publicKey.prototype = {\n\t\tencrypt: function(m) {\n\t\t\treturn this.randomize(this.n.multiply(m).add(BigInteger.ONE).mod(this.n2));\n\t\t},\n\t\tadd: function(a,b) {\n\t\t\treturn a.multiply(b).remainder(this.n2);\n\t\t},\n\t\tmult: function(a,b) {\n\t\t\treturn a.modPow(b, this.n2);\n\t\t},\n\t\trandomize: function(a) {\n\t\t\tvar rn;\n\t\t\tif (this.rncache.length > 0) {\n\t\t\t\trn = this.rncache.pop();\n\t\t\t} else {\n\t\t\t\trn = this.getRN();\n\t\t\t}\n\t\t\treturn (a.multiply(rn)).mod(this.n2);\n\t\t},\n\t\tgetRN: function() {\n\t\t\tvar r, rng = new SecureRandom();\n\t\t\tdo {\n\t\t\t\tr = new BigInteger(this.bits,rng);\n\t\t\t\t// make sure r <= n\n\t\t\t} while(r.compareTo(this.n) >= 0);\n\t\t\treturn r.modPow(this.n, this.n2);\n\t\t},\n\t\t// Precompute values to make future invokations of encrypt and randomize (significantly) faster.\n\t\t// n is the number of precomputed values.\n\t\tprecompute: function(n) {\n\t\t\tfor (var i = 0; i < n; i++) {\n\t\t\t\tthis.rncache.push(this.getRN());\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpaillier.privateKey.prototype = {\n\t\tdecrypt: function(c) {\n\t\t\treturn c.modPow(this.lambda,this.pubkey.n2).subtract(BigInteger.ONE).divide(this.pubkey.n).multiply(this.x).mod(this.pubkey.n);\n\t\t}\n\t}\n\t\n\tmodule.exports = paillier;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t(function(){\n\t\n\t    // Copyright (c) 2005  Tom Wu\n\t    // All Rights Reserved.\n\t    // See \"LICENSE\" for details.\n\t\n\t    // Basic JavaScript BN library - subset useful for RSA encryption.\n\t\n\t    // Bits per digit\n\t    var dbits;\n\t\n\t    // JavaScript engine analysis\n\t    var canary = 0xdeadbeefcafe;\n\t    var j_lm = ((canary&0xffffff)==0xefcafe);\n\t\n\t    // (public) Constructor\n\t    function BigInteger(a,b,c) {\n\t      if(a != null)\n\t        if(\"number\" == typeof a) this.fromNumber(a,b,c);\n\t        else if(b == null && \"string\" != typeof a) this.fromString(a,256);\n\t        else this.fromString(a,b);\n\t    }\n\t\n\t    // return new, unset BigInteger\n\t    function nbi() { return new BigInteger(null); }\n\t\n\t    // am: Compute w_j += (x*this_i), propagate carries,\n\t    // c is initial carry, returns final carry.\n\t    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n\t    // We need to select the fastest one that works in this environment.\n\t\n\t    // am1: use a single mult and divide to get the high bits,\n\t    // max digit bits should be 26 because\n\t    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n\t    function am1(i,x,w,j,c,n) {\n\t      while(--n >= 0) {\n\t        var v = x*this[i++]+w[j]+c;\n\t        c = Math.floor(v/0x4000000);\n\t        w[j++] = v&0x3ffffff;\n\t      }\n\t      return c;\n\t    }\n\t    // am2 avoids a big mult-and-extract completely.\n\t    // Max digit bits should be <= 30 because we do bitwise ops\n\t    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n\t    function am2(i,x,w,j,c,n) {\n\t      var xl = x&0x7fff, xh = x>>15;\n\t      while(--n >= 0) {\n\t        var l = this[i]&0x7fff;\n\t        var h = this[i++]>>15;\n\t        var m = xh*l+h*xl;\n\t        l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);\n\t        c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);\n\t        w[j++] = l&0x3fffffff;\n\t      }\n\t      return c;\n\t    }\n\t    // Alternately, set max digit bits to 28 since some\n\t    // browsers slow down when dealing with 32-bit numbers.\n\t    function am3(i,x,w,j,c,n) {\n\t      var xl = x&0x3fff, xh = x>>14;\n\t      while(--n >= 0) {\n\t        var l = this[i]&0x3fff;\n\t        var h = this[i++]>>14;\n\t        var m = xh*l+h*xl;\n\t        l = xl*l+((m&0x3fff)<<14)+w[j]+c;\n\t        c = (l>>28)+(m>>14)+xh*h;\n\t        w[j++] = l&0xfffffff;\n\t      }\n\t      return c;\n\t    }\n\t    var inBrowser = typeof navigator !== \"undefined\";\n\t    if(inBrowser && j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n\t      BigInteger.prototype.am = am2;\n\t      dbits = 30;\n\t    }\n\t    else if(inBrowser && j_lm && (navigator.appName != \"Netscape\")) {\n\t      BigInteger.prototype.am = am1;\n\t      dbits = 26;\n\t    }\n\t    else { // Mozilla/Netscape seems to prefer am3\n\t      BigInteger.prototype.am = am3;\n\t      dbits = 28;\n\t    }\n\t\n\t    BigInteger.prototype.DB = dbits;\n\t    BigInteger.prototype.DM = ((1<<dbits)-1);\n\t    BigInteger.prototype.DV = (1<<dbits);\n\t\n\t    var BI_FP = 52;\n\t    BigInteger.prototype.FV = Math.pow(2,BI_FP);\n\t    BigInteger.prototype.F1 = BI_FP-dbits;\n\t    BigInteger.prototype.F2 = 2*dbits-BI_FP;\n\t\n\t    // Digit conversions\n\t    var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n\t    var BI_RC = new Array();\n\t    var rr,vv;\n\t    rr = \"0\".charCodeAt(0);\n\t    for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\n\t    rr = \"a\".charCodeAt(0);\n\t    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\t    rr = \"A\".charCodeAt(0);\n\t    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\t\n\t    function int2char(n) { return BI_RM.charAt(n); }\n\t    function intAt(s,i) {\n\t      var c = BI_RC[s.charCodeAt(i)];\n\t      return (c==null)?-1:c;\n\t    }\n\t\n\t    // (protected) copy this to r\n\t    function bnpCopyTo(r) {\n\t      for(var i = this.t-1; i >= 0; --i) r[i] = this[i];\n\t      r.t = this.t;\n\t      r.s = this.s;\n\t    }\n\t\n\t    // (protected) set from integer value x, -DV <= x < DV\n\t    function bnpFromInt(x) {\n\t      this.t = 1;\n\t      this.s = (x<0)?-1:0;\n\t      if(x > 0) this[0] = x;\n\t      else if(x < -1) this[0] = x+this.DV;\n\t      else this.t = 0;\n\t    }\n\t\n\t    // return bigint initialized to value\n\t    function nbv(i) { var r = nbi(); r.fromInt(i); return r; }\n\t\n\t    // (protected) set from string and radix\n\t    function bnpFromString(s,b) {\n\t      var k;\n\t      if(b == 16) k = 4;\n\t      else if(b == 8) k = 3;\n\t      else if(b == 256) k = 8; // byte array\n\t      else if(b == 2) k = 1;\n\t      else if(b == 32) k = 5;\n\t      else if(b == 4) k = 2;\n\t      else { this.fromRadix(s,b); return; }\n\t      this.t = 0;\n\t      this.s = 0;\n\t      var i = s.length, mi = false, sh = 0;\n\t      while(--i >= 0) {\n\t        var x = (k==8)?s[i]&0xff:intAt(s,i);\n\t        if(x < 0) {\n\t          if(s.charAt(i) == \"-\") mi = true;\n\t          continue;\n\t        }\n\t        mi = false;\n\t        if(sh == 0)\n\t          this[this.t++] = x;\n\t        else if(sh+k > this.DB) {\n\t          this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;\n\t          this[this.t++] = (x>>(this.DB-sh));\n\t        }\n\t        else\n\t          this[this.t-1] |= x<<sh;\n\t        sh += k;\n\t        if(sh >= this.DB) sh -= this.DB;\n\t      }\n\t      if(k == 8 && (s[0]&0x80) != 0) {\n\t        this.s = -1;\n\t        if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;\n\t      }\n\t      this.clamp();\n\t      if(mi) BigInteger.ZERO.subTo(this,this);\n\t    }\n\t\n\t    // (protected) clamp off excess high words\n\t    function bnpClamp() {\n\t      var c = this.s&this.DM;\n\t      while(this.t > 0 && this[this.t-1] == c) --this.t;\n\t    }\n\t\n\t    // (public) return string representation in given radix\n\t    function bnToString(b) {\n\t      if(this.s < 0) return \"-\"+this.negate().toString(b);\n\t      var k;\n\t      if(b == 16) k = 4;\n\t      else if(b == 8) k = 3;\n\t      else if(b == 2) k = 1;\n\t      else if(b == 32) k = 5;\n\t      else if(b == 4) k = 2;\n\t      else return this.toRadix(b);\n\t      var km = (1<<k)-1, d, m = false, r = \"\", i = this.t;\n\t      var p = this.DB-(i*this.DB)%k;\n\t      if(i-- > 0) {\n\t        if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }\n\t        while(i >= 0) {\n\t          if(p < k) {\n\t            d = (this[i]&((1<<p)-1))<<(k-p);\n\t            d |= this[--i]>>(p+=this.DB-k);\n\t          }\n\t          else {\n\t            d = (this[i]>>(p-=k))&km;\n\t            if(p <= 0) { p += this.DB; --i; }\n\t          }\n\t          if(d > 0) m = true;\n\t          if(m) r += int2char(d);\n\t        }\n\t      }\n\t      return m?r:\"0\";\n\t    }\n\t\n\t    // (public) -this\n\t    function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }\n\t\n\t    // (public) |this|\n\t    function bnAbs() { return (this.s<0)?this.negate():this; }\n\t\n\t    // (public) return + if this > a, - if this < a, 0 if equal\n\t    function bnCompareTo(a) {\n\t      var r = this.s-a.s;\n\t      if(r != 0) return r;\n\t      var i = this.t;\n\t      r = i-a.t;\n\t      if(r != 0) return (this.s<0)?-r:r;\n\t      while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;\n\t      return 0;\n\t    }\n\t\n\t    // returns bit length of the integer x\n\t    function nbits(x) {\n\t      var r = 1, t;\n\t      if((t=x>>>16) != 0) { x = t; r += 16; }\n\t      if((t=x>>8) != 0) { x = t; r += 8; }\n\t      if((t=x>>4) != 0) { x = t; r += 4; }\n\t      if((t=x>>2) != 0) { x = t; r += 2; }\n\t      if((t=x>>1) != 0) { x = t; r += 1; }\n\t      return r;\n\t    }\n\t\n\t    // (public) return the number of bits in \"this\"\n\t    function bnBitLength() {\n\t      if(this.t <= 0) return 0;\n\t      return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));\n\t    }\n\t\n\t    // (protected) r = this << n*DB\n\t    function bnpDLShiftTo(n,r) {\n\t      var i;\n\t      for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];\n\t      for(i = n-1; i >= 0; --i) r[i] = 0;\n\t      r.t = this.t+n;\n\t      r.s = this.s;\n\t    }\n\t\n\t    // (protected) r = this >> n*DB\n\t    function bnpDRShiftTo(n,r) {\n\t      for(var i = n; i < this.t; ++i) r[i-n] = this[i];\n\t      r.t = Math.max(this.t-n,0);\n\t      r.s = this.s;\n\t    }\n\t\n\t    // (protected) r = this << n\n\t    function bnpLShiftTo(n,r) {\n\t      var bs = n%this.DB;\n\t      var cbs = this.DB-bs;\n\t      var bm = (1<<cbs)-1;\n\t      var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;\n\t      for(i = this.t-1; i >= 0; --i) {\n\t        r[i+ds+1] = (this[i]>>cbs)|c;\n\t        c = (this[i]&bm)<<bs;\n\t      }\n\t      for(i = ds-1; i >= 0; --i) r[i] = 0;\n\t      r[ds] = c;\n\t      r.t = this.t+ds+1;\n\t      r.s = this.s;\n\t      r.clamp();\n\t    }\n\t\n\t    // (protected) r = this >> n\n\t    function bnpRShiftTo(n,r) {\n\t      r.s = this.s;\n\t      var ds = Math.floor(n/this.DB);\n\t      if(ds >= this.t) { r.t = 0; return; }\n\t      var bs = n%this.DB;\n\t      var cbs = this.DB-bs;\n\t      var bm = (1<<bs)-1;\n\t      r[0] = this[ds]>>bs;\n\t      for(var i = ds+1; i < this.t; ++i) {\n\t        r[i-ds-1] |= (this[i]&bm)<<cbs;\n\t        r[i-ds] = this[i]>>bs;\n\t      }\n\t      if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;\n\t      r.t = this.t-ds;\n\t      r.clamp();\n\t    }\n\t\n\t    // (protected) r = this - a\n\t    function bnpSubTo(a,r) {\n\t      var i = 0, c = 0, m = Math.min(a.t,this.t);\n\t      while(i < m) {\n\t        c += this[i]-a[i];\n\t        r[i++] = c&this.DM;\n\t        c >>= this.DB;\n\t      }\n\t      if(a.t < this.t) {\n\t        c -= a.s;\n\t        while(i < this.t) {\n\t          c += this[i];\n\t          r[i++] = c&this.DM;\n\t          c >>= this.DB;\n\t        }\n\t        c += this.s;\n\t      }\n\t      else {\n\t        c += this.s;\n\t        while(i < a.t) {\n\t          c -= a[i];\n\t          r[i++] = c&this.DM;\n\t          c >>= this.DB;\n\t        }\n\t        c -= a.s;\n\t      }\n\t      r.s = (c<0)?-1:0;\n\t      if(c < -1) r[i++] = this.DV+c;\n\t      else if(c > 0) r[i++] = c;\n\t      r.t = i;\n\t      r.clamp();\n\t    }\n\t\n\t    // (protected) r = this * a, r != this,a (HAC 14.12)\n\t    // \"this\" should be the larger one if appropriate.\n\t    function bnpMultiplyTo(a,r) {\n\t      var x = this.abs(), y = a.abs();\n\t      var i = x.t;\n\t      r.t = i+y.t;\n\t      while(--i >= 0) r[i] = 0;\n\t      for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);\n\t      r.s = 0;\n\t      r.clamp();\n\t      if(this.s != a.s) BigInteger.ZERO.subTo(r,r);\n\t    }\n\t\n\t    // (protected) r = this^2, r != this (HAC 14.16)\n\t    function bnpSquareTo(r) {\n\t      var x = this.abs();\n\t      var i = r.t = 2*x.t;\n\t      while(--i >= 0) r[i] = 0;\n\t      for(i = 0; i < x.t-1; ++i) {\n\t        var c = x.am(i,x[i],r,2*i,0,1);\n\t        if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {\n\t          r[i+x.t] -= x.DV;\n\t          r[i+x.t+1] = 1;\n\t        }\n\t      }\n\t      if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);\n\t      r.s = 0;\n\t      r.clamp();\n\t    }\n\t\n\t    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n\t    // r != q, this != m.  q or r may be null.\n\t    function bnpDivRemTo(m,q,r) {\n\t      var pm = m.abs();\n\t      if(pm.t <= 0) return;\n\t      var pt = this.abs();\n\t      if(pt.t < pm.t) {\n\t        if(q != null) q.fromInt(0);\n\t        if(r != null) this.copyTo(r);\n\t        return;\n\t      }\n\t      if(r == null) r = nbi();\n\t      var y = nbi(), ts = this.s, ms = m.s;\n\t      var nsh = this.DB-nbits(pm[pm.t-1]);   // normalize modulus\n\t      if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }\n\t      else { pm.copyTo(y); pt.copyTo(r); }\n\t      var ys = y.t;\n\t      var y0 = y[ys-1];\n\t      if(y0 == 0) return;\n\t      var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);\n\t      var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;\n\t      var i = r.t, j = i-ys, t = (q==null)?nbi():q;\n\t      y.dlShiftTo(j,t);\n\t      if(r.compareTo(t) >= 0) {\n\t        r[r.t++] = 1;\n\t        r.subTo(t,r);\n\t      }\n\t      BigInteger.ONE.dlShiftTo(ys,t);\n\t      t.subTo(y,y);  // \"negative\" y so we can replace sub with am later\n\t      while(y.t < ys) y[y.t++] = 0;\n\t      while(--j >= 0) {\n\t        // Estimate quotient digit\n\t        var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);\n\t        if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {   // Try it out\n\t          y.dlShiftTo(j,t);\n\t          r.subTo(t,r);\n\t          while(r[i] < --qd) r.subTo(t,r);\n\t        }\n\t      }\n\t      if(q != null) {\n\t        r.drShiftTo(ys,q);\n\t        if(ts != ms) BigInteger.ZERO.subTo(q,q);\n\t      }\n\t      r.t = ys;\n\t      r.clamp();\n\t      if(nsh > 0) r.rShiftTo(nsh,r); // Denormalize remainder\n\t      if(ts < 0) BigInteger.ZERO.subTo(r,r);\n\t    }\n\t\n\t    // (public) this mod a\n\t    function bnMod(a) {\n\t      var r = nbi();\n\t      this.abs().divRemTo(a,null,r);\n\t      if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);\n\t      return r;\n\t    }\n\t\n\t    // Modular reduction using \"classic\" algorithm\n\t    function Classic(m) { this.m = m; }\n\t    function cConvert(x) {\n\t      if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n\t      else return x;\n\t    }\n\t    function cRevert(x) { return x; }\n\t    function cReduce(x) { x.divRemTo(this.m,null,x); }\n\t    function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\t    function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\t\n\t    Classic.prototype.convert = cConvert;\n\t    Classic.prototype.revert = cRevert;\n\t    Classic.prototype.reduce = cReduce;\n\t    Classic.prototype.mulTo = cMulTo;\n\t    Classic.prototype.sqrTo = cSqrTo;\n\t\n\t    // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n\t    // justification:\n\t    //         xy == 1 (mod m)\n\t    //         xy =  1+km\n\t    //   xy(2-xy) = (1+km)(1-km)\n\t    // x[y(2-xy)] = 1-k^2m^2\n\t    // x[y(2-xy)] == 1 (mod m^2)\n\t    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n\t    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n\t    // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n\t    function bnpInvDigit() {\n\t      if(this.t < 1) return 0;\n\t      var x = this[0];\n\t      if((x&1) == 0) return 0;\n\t      var y = x&3;       // y == 1/x mod 2^2\n\t      y = (y*(2-(x&0xf)*y))&0xf; // y == 1/x mod 2^4\n\t      y = (y*(2-(x&0xff)*y))&0xff;   // y == 1/x mod 2^8\n\t      y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;    // y == 1/x mod 2^16\n\t      // last step - calculate inverse mod DV directly;\n\t      // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n\t      y = (y*(2-x*y%this.DV))%this.DV;       // y == 1/x mod 2^dbits\n\t      // we really want the negative inverse, and -DV < y < DV\n\t      return (y>0)?this.DV-y:-y;\n\t    }\n\t\n\t    // Montgomery reduction\n\t    function Montgomery(m) {\n\t      this.m = m;\n\t      this.mp = m.invDigit();\n\t      this.mpl = this.mp&0x7fff;\n\t      this.mph = this.mp>>15;\n\t      this.um = (1<<(m.DB-15))-1;\n\t      this.mt2 = 2*m.t;\n\t    }\n\t\n\t    // xR mod m\n\t    function montConvert(x) {\n\t      var r = nbi();\n\t      x.abs().dlShiftTo(this.m.t,r);\n\t      r.divRemTo(this.m,null,r);\n\t      if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);\n\t      return r;\n\t    }\n\t\n\t    // x/R mod m\n\t    function montRevert(x) {\n\t      var r = nbi();\n\t      x.copyTo(r);\n\t      this.reduce(r);\n\t      return r;\n\t    }\n\t\n\t    // x = x/R mod m (HAC 14.32)\n\t    function montReduce(x) {\n\t      while(x.t <= this.mt2) // pad x so am has enough room later\n\t        x[x.t++] = 0;\n\t      for(var i = 0; i < this.m.t; ++i) {\n\t        // faster way of calculating u0 = x[i]*mp mod DV\n\t        var j = x[i]&0x7fff;\n\t        var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;\n\t        // use am to combine the multiply-shift-add into one call\n\t        j = i+this.m.t;\n\t        x[j] += this.m.am(0,u0,x,i,0,this.m.t);\n\t        // propagate carry\n\t        while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }\n\t      }\n\t      x.clamp();\n\t      x.drShiftTo(this.m.t,x);\n\t      if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n\t    }\n\t\n\t    // r = \"x^2/R mod m\"; x != r\n\t    function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\t\n\t    // r = \"xy/R mod m\"; x,y != r\n\t    function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\t\n\t    Montgomery.prototype.convert = montConvert;\n\t    Montgomery.prototype.revert = montRevert;\n\t    Montgomery.prototype.reduce = montReduce;\n\t    Montgomery.prototype.mulTo = montMulTo;\n\t    Montgomery.prototype.sqrTo = montSqrTo;\n\t\n\t    // (protected) true iff this is even\n\t    function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }\n\t\n\t    // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n\t    function bnpExp(e,z) {\n\t      if(e > 0xffffffff || e < 1) return BigInteger.ONE;\n\t      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;\n\t      g.copyTo(r);\n\t      while(--i >= 0) {\n\t        z.sqrTo(r,r2);\n\t        if((e&(1<<i)) > 0) z.mulTo(r2,g,r);\n\t        else { var t = r; r = r2; r2 = t; }\n\t      }\n\t      return z.revert(r);\n\t    }\n\t\n\t    // (public) this^e % m, 0 <= e < 2^32\n\t    function bnModPowInt(e,m) {\n\t      var z;\n\t      if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);\n\t      return this.exp(e,z);\n\t    }\n\t\n\t    // protected\n\t    BigInteger.prototype.copyTo = bnpCopyTo;\n\t    BigInteger.prototype.fromInt = bnpFromInt;\n\t    BigInteger.prototype.fromString = bnpFromString;\n\t    BigInteger.prototype.clamp = bnpClamp;\n\t    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n\t    BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n\t    BigInteger.prototype.lShiftTo = bnpLShiftTo;\n\t    BigInteger.prototype.rShiftTo = bnpRShiftTo;\n\t    BigInteger.prototype.subTo = bnpSubTo;\n\t    BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n\t    BigInteger.prototype.squareTo = bnpSquareTo;\n\t    BigInteger.prototype.divRemTo = bnpDivRemTo;\n\t    BigInteger.prototype.invDigit = bnpInvDigit;\n\t    BigInteger.prototype.isEven = bnpIsEven;\n\t    BigInteger.prototype.exp = bnpExp;\n\t\n\t    // public\n\t    BigInteger.prototype.toString = bnToString;\n\t    BigInteger.prototype.negate = bnNegate;\n\t    BigInteger.prototype.abs = bnAbs;\n\t    BigInteger.prototype.compareTo = bnCompareTo;\n\t    BigInteger.prototype.bitLength = bnBitLength;\n\t    BigInteger.prototype.mod = bnMod;\n\t    BigInteger.prototype.modPowInt = bnModPowInt;\n\t\n\t    // \"constants\"\n\t    BigInteger.ZERO = nbv(0);\n\t    BigInteger.ONE = nbv(1);\n\t\n\t    // Copyright (c) 2005-2009  Tom Wu\n\t    // All Rights Reserved.\n\t    // See \"LICENSE\" for details.\n\t\n\t    // Extended JavaScript BN functions, required for RSA private ops.\n\t\n\t    // Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n\t    // Version 1.2: square() API, isProbablePrime fix\n\t\n\t    // (public)\n\t    function bnClone() { var r = nbi(); this.copyTo(r); return r; }\n\t\n\t    // (public) return value as integer\n\t    function bnIntValue() {\n\t      if(this.s < 0) {\n\t        if(this.t == 1) return this[0]-this.DV;\n\t        else if(this.t == 0) return -1;\n\t      }\n\t      else if(this.t == 1) return this[0];\n\t      else if(this.t == 0) return 0;\n\t      // assumes 16 < DB < 32\n\t      return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];\n\t    }\n\t\n\t    // (public) return value as byte\n\t    function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }\n\t\n\t    // (public) return value as short (assumes DB>=16)\n\t    function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }\n\t\n\t    // (protected) return x s.t. r^x < DV\n\t    function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }\n\t\n\t    // (public) 0 if this == 0, 1 if this > 0\n\t    function bnSigNum() {\n\t      if(this.s < 0) return -1;\n\t      else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n\t      else return 1;\n\t    }\n\t\n\t    // (protected) convert to radix string\n\t    function bnpToRadix(b) {\n\t      if(b == null) b = 10;\n\t      if(this.signum() == 0 || b < 2 || b > 36) return \"0\";\n\t      var cs = this.chunkSize(b);\n\t      var a = Math.pow(b,cs);\n\t      var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n\t      this.divRemTo(d,y,z);\n\t      while(y.signum() > 0) {\n\t        r = (a+z.intValue()).toString(b).substr(1) + r;\n\t        y.divRemTo(d,y,z);\n\t      }\n\t      return z.intValue().toString(b) + r;\n\t    }\n\t\n\t    // (protected) convert from radix string\n\t    function bnpFromRadix(s,b) {\n\t      this.fromInt(0);\n\t      if(b == null) b = 10;\n\t      var cs = this.chunkSize(b);\n\t      var d = Math.pow(b,cs), mi = false, j = 0, w = 0;\n\t      for(var i = 0; i < s.length; ++i) {\n\t        var x = intAt(s,i);\n\t        if(x < 0) {\n\t          if(s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n\t          continue;\n\t        }\n\t        w = b*w+x;\n\t        if(++j >= cs) {\n\t          this.dMultiply(d);\n\t          this.dAddOffset(w,0);\n\t          j = 0;\n\t          w = 0;\n\t        }\n\t      }\n\t      if(j > 0) {\n\t        this.dMultiply(Math.pow(b,j));\n\t        this.dAddOffset(w,0);\n\t      }\n\t      if(mi) BigInteger.ZERO.subTo(this,this);\n\t    }\n\t\n\t    // (protected) alternate constructor\n\t    function bnpFromNumber(a,b,c) {\n\t      if(\"number\" == typeof b) {\n\t        // new BigInteger(int,int,RNG)\n\t        if(a < 2) this.fromInt(1);\n\t        else {\n\t          this.fromNumber(a,c);\n\t          if(!this.testBit(a-1))\t// force MSB set\n\t            this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);\n\t          if(this.isEven()) this.dAddOffset(1,0); // force odd\n\t          while(!this.isProbablePrime(b)) {\n\t            this.dAddOffset(2,0);\n\t            if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);\n\t          }\n\t        }\n\t      }\n\t      else {\n\t        // new BigInteger(int,RNG)\n\t        var x = new Array(), t = a&7;\n\t        x.length = (a>>3)+1;\n\t        b.nextBytes(x);\n\t        if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;\n\t        this.fromString(x,256);\n\t      }\n\t    }\n\t\n\t    // (public) convert to bigendian byte array\n\t    function bnToByteArray() {\n\t      var i = this.t, r = new Array();\n\t      r[0] = this.s;\n\t      var p = this.DB-(i*this.DB)%8, d, k = 0;\n\t      if(i-- > 0) {\n\t        if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)\n\t          r[k++] = d|(this.s<<(this.DB-p));\n\t        while(i >= 0) {\n\t          if(p < 8) {\n\t            d = (this[i]&((1<<p)-1))<<(8-p);\n\t            d |= this[--i]>>(p+=this.DB-8);\n\t          }\n\t          else {\n\t            d = (this[i]>>(p-=8))&0xff;\n\t            if(p <= 0) { p += this.DB; --i; }\n\t          }\n\t          if((d&0x80) != 0) d |= -256;\n\t          if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;\n\t          if(k > 0 || d != this.s) r[k++] = d;\n\t        }\n\t      }\n\t      return r;\n\t    }\n\t\n\t    function bnEquals(a) { return(this.compareTo(a)==0); }\n\t    function bnMin(a) { return(this.compareTo(a)<0)?this:a; }\n\t    function bnMax(a) { return(this.compareTo(a)>0)?this:a; }\n\t\n\t    // (protected) r = this op a (bitwise)\n\t    function bnpBitwiseTo(a,op,r) {\n\t      var i, f, m = Math.min(a.t,this.t);\n\t      for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);\n\t      if(a.t < this.t) {\n\t        f = a.s&this.DM;\n\t        for(i = m; i < this.t; ++i) r[i] = op(this[i],f);\n\t        r.t = this.t;\n\t      }\n\t      else {\n\t        f = this.s&this.DM;\n\t        for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);\n\t        r.t = a.t;\n\t      }\n\t      r.s = op(this.s,a.s);\n\t      r.clamp();\n\t    }\n\t\n\t    // (public) this & a\n\t    function op_and(x,y) { return x&y; }\n\t    function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }\n\t\n\t    // (public) this | a\n\t    function op_or(x,y) { return x|y; }\n\t    function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }\n\t\n\t    // (public) this ^ a\n\t    function op_xor(x,y) { return x^y; }\n\t    function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }\n\t\n\t    // (public) this & ~a\n\t    function op_andnot(x,y) { return x&~y; }\n\t    function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }\n\t\n\t    // (public) ~this\n\t    function bnNot() {\n\t      var r = nbi();\n\t      for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];\n\t      r.t = this.t;\n\t      r.s = ~this.s;\n\t      return r;\n\t    }\n\t\n\t    // (public) this << n\n\t    function bnShiftLeft(n) {\n\t      var r = nbi();\n\t      if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);\n\t      return r;\n\t    }\n\t\n\t    // (public) this >> n\n\t    function bnShiftRight(n) {\n\t      var r = nbi();\n\t      if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);\n\t      return r;\n\t    }\n\t\n\t    // return index of lowest 1-bit in x, x < 2^31\n\t    function lbit(x) {\n\t      if(x == 0) return -1;\n\t      var r = 0;\n\t      if((x&0xffff) == 0) { x >>= 16; r += 16; }\n\t      if((x&0xff) == 0) { x >>= 8; r += 8; }\n\t      if((x&0xf) == 0) { x >>= 4; r += 4; }\n\t      if((x&3) == 0) { x >>= 2; r += 2; }\n\t      if((x&1) == 0) ++r;\n\t      return r;\n\t    }\n\t\n\t    // (public) returns index of lowest 1-bit (or -1 if none)\n\t    function bnGetLowestSetBit() {\n\t      for(var i = 0; i < this.t; ++i)\n\t        if(this[i] != 0) return i*this.DB+lbit(this[i]);\n\t      if(this.s < 0) return this.t*this.DB;\n\t      return -1;\n\t    }\n\t\n\t    // return number of 1 bits in x\n\t    function cbit(x) {\n\t      var r = 0;\n\t      while(x != 0) { x &= x-1; ++r; }\n\t      return r;\n\t    }\n\t\n\t    // (public) return number of set bits\n\t    function bnBitCount() {\n\t      var r = 0, x = this.s&this.DM;\n\t      for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);\n\t      return r;\n\t    }\n\t\n\t    // (public) true iff nth bit is set\n\t    function bnTestBit(n) {\n\t      var j = Math.floor(n/this.DB);\n\t      if(j >= this.t) return(this.s!=0);\n\t      return((this[j]&(1<<(n%this.DB)))!=0);\n\t    }\n\t\n\t    // (protected) this op (1<<n)\n\t    function bnpChangeBit(n,op) {\n\t      var r = BigInteger.ONE.shiftLeft(n);\n\t      this.bitwiseTo(r,op,r);\n\t      return r;\n\t    }\n\t\n\t    // (public) this | (1<<n)\n\t    function bnSetBit(n) { return this.changeBit(n,op_or); }\n\t\n\t    // (public) this & ~(1<<n)\n\t    function bnClearBit(n) { return this.changeBit(n,op_andnot); }\n\t\n\t    // (public) this ^ (1<<n)\n\t    function bnFlipBit(n) { return this.changeBit(n,op_xor); }\n\t\n\t    // (protected) r = this + a\n\t    function bnpAddTo(a,r) {\n\t      var i = 0, c = 0, m = Math.min(a.t,this.t);\n\t      while(i < m) {\n\t        c += this[i]+a[i];\n\t        r[i++] = c&this.DM;\n\t        c >>= this.DB;\n\t      }\n\t      if(a.t < this.t) {\n\t        c += a.s;\n\t        while(i < this.t) {\n\t          c += this[i];\n\t          r[i++] = c&this.DM;\n\t          c >>= this.DB;\n\t        }\n\t        c += this.s;\n\t      }\n\t      else {\n\t        c += this.s;\n\t        while(i < a.t) {\n\t          c += a[i];\n\t          r[i++] = c&this.DM;\n\t          c >>= this.DB;\n\t        }\n\t        c += a.s;\n\t      }\n\t      r.s = (c<0)?-1:0;\n\t      if(c > 0) r[i++] = c;\n\t      else if(c < -1) r[i++] = this.DV+c;\n\t      r.t = i;\n\t      r.clamp();\n\t    }\n\t\n\t    // (public) this + a\n\t    function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }\n\t\n\t    // (public) this - a\n\t    function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }\n\t\n\t    // (public) this * a\n\t    function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }\n\t\n\t    // (public) this^2\n\t    function bnSquare() { var r = nbi(); this.squareTo(r); return r; }\n\t\n\t    // (public) this / a\n\t    function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }\n\t\n\t    // (public) this % a\n\t    function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }\n\t\n\t    // (public) [this/a,this%a]\n\t    function bnDivideAndRemainder(a) {\n\t      var q = nbi(), r = nbi();\n\t      this.divRemTo(a,q,r);\n\t      return new Array(q,r);\n\t    }\n\t\n\t    // (protected) this *= n, this >= 0, 1 < n < DV\n\t    function bnpDMultiply(n) {\n\t      this[this.t] = this.am(0,n-1,this,0,0,this.t);\n\t      ++this.t;\n\t      this.clamp();\n\t    }\n\t\n\t    // (protected) this += n << w words, this >= 0\n\t    function bnpDAddOffset(n,w) {\n\t      if(n == 0) return;\n\t      while(this.t <= w) this[this.t++] = 0;\n\t      this[w] += n;\n\t      while(this[w] >= this.DV) {\n\t        this[w] -= this.DV;\n\t        if(++w >= this.t) this[this.t++] = 0;\n\t        ++this[w];\n\t      }\n\t    }\n\t\n\t    // A \"null\" reducer\n\t    function NullExp() {}\n\t    function nNop(x) { return x; }\n\t    function nMulTo(x,y,r) { x.multiplyTo(y,r); }\n\t    function nSqrTo(x,r) { x.squareTo(r); }\n\t\n\t    NullExp.prototype.convert = nNop;\n\t    NullExp.prototype.revert = nNop;\n\t    NullExp.prototype.mulTo = nMulTo;\n\t    NullExp.prototype.sqrTo = nSqrTo;\n\t\n\t    // (public) this^e\n\t    function bnPow(e) { return this.exp(e,new NullExp()); }\n\t\n\t    // (protected) r = lower n words of \"this * a\", a.t <= n\n\t    // \"this\" should be the larger one if appropriate.\n\t    function bnpMultiplyLowerTo(a,n,r) {\n\t      var i = Math.min(this.t+a.t,n);\n\t      r.s = 0; // assumes a,this >= 0\n\t      r.t = i;\n\t      while(i > 0) r[--i] = 0;\n\t      var j;\n\t      for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);\n\t      for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);\n\t      r.clamp();\n\t    }\n\t\n\t    // (protected) r = \"this * a\" without lower n words, n > 0\n\t    // \"this\" should be the larger one if appropriate.\n\t    function bnpMultiplyUpperTo(a,n,r) {\n\t      --n;\n\t      var i = r.t = this.t+a.t-n;\n\t      r.s = 0; // assumes a,this >= 0\n\t      while(--i >= 0) r[i] = 0;\n\t      for(i = Math.max(n-this.t,0); i < a.t; ++i)\n\t        r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);\n\t      r.clamp();\n\t      r.drShiftTo(1,r);\n\t    }\n\t\n\t    // Barrett modular reduction\n\t    function Barrett(m) {\n\t      // setup Barrett\n\t      this.r2 = nbi();\n\t      this.q3 = nbi();\n\t      BigInteger.ONE.dlShiftTo(2*m.t,this.r2);\n\t      this.mu = this.r2.divide(m);\n\t      this.m = m;\n\t    }\n\t\n\t    function barrettConvert(x) {\n\t      if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);\n\t      else if(x.compareTo(this.m) < 0) return x;\n\t      else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }\n\t    }\n\t\n\t    function barrettRevert(x) { return x; }\n\t\n\t    // x = x mod m (HAC 14.42)\n\t    function barrettReduce(x) {\n\t      x.drShiftTo(this.m.t-1,this.r2);\n\t      if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }\n\t      this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);\n\t      this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);\n\t      while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);\n\t      x.subTo(this.r2,x);\n\t      while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n\t    }\n\t\n\t    // r = x^2 mod m; x != r\n\t    function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\t\n\t    // r = x*y mod m; x,y != r\n\t    function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\t\n\t    Barrett.prototype.convert = barrettConvert;\n\t    Barrett.prototype.revert = barrettRevert;\n\t    Barrett.prototype.reduce = barrettReduce;\n\t    Barrett.prototype.mulTo = barrettMulTo;\n\t    Barrett.prototype.sqrTo = barrettSqrTo;\n\t\n\t    // (public) this^e % m (HAC 14.85)\n\t    function bnModPow(e,m) {\n\t      var i = e.bitLength(), k, r = nbv(1), z;\n\t      if(i <= 0) return r;\n\t      else if(i < 18) k = 1;\n\t      else if(i < 48) k = 3;\n\t      else if(i < 144) k = 4;\n\t      else if(i < 768) k = 5;\n\t      else k = 6;\n\t      if(i < 8)\n\t        z = new Classic(m);\n\t      else if(m.isEven())\n\t        z = new Barrett(m);\n\t      else\n\t        z = new Montgomery(m);\n\t\n\t      // precomputation\n\t      var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;\n\t      g[1] = z.convert(this);\n\t      if(k > 1) {\n\t        var g2 = nbi();\n\t        z.sqrTo(g[1],g2);\n\t        while(n <= km) {\n\t          g[n] = nbi();\n\t          z.mulTo(g2,g[n-2],g[n]);\n\t          n += 2;\n\t        }\n\t      }\n\t\n\t      var j = e.t-1, w, is1 = true, r2 = nbi(), t;\n\t      i = nbits(e[j])-1;\n\t      while(j >= 0) {\n\t        if(i >= k1) w = (e[j]>>(i-k1))&km;\n\t        else {\n\t          w = (e[j]&((1<<(i+1))-1))<<(k1-i);\n\t          if(j > 0) w |= e[j-1]>>(this.DB+i-k1);\n\t        }\n\t\n\t        n = k;\n\t        while((w&1) == 0) { w >>= 1; --n; }\n\t        if((i -= n) < 0) { i += this.DB; --j; }\n\t        if(is1) {\t// ret == 1, don't bother squaring or multiplying it\n\t          g[w].copyTo(r);\n\t          is1 = false;\n\t        }\n\t        else {\n\t          while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }\n\t          if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }\n\t          z.mulTo(r2,g[w],r);\n\t        }\n\t\n\t        while(j >= 0 && (e[j]&(1<<i)) == 0) {\n\t          z.sqrTo(r,r2); t = r; r = r2; r2 = t;\n\t          if(--i < 0) { i = this.DB-1; --j; }\n\t        }\n\t      }\n\t      return z.revert(r);\n\t    }\n\t\n\t    // (public) gcd(this,a) (HAC 14.54)\n\t    function bnGCD(a) {\n\t      var x = (this.s<0)?this.negate():this.clone();\n\t      var y = (a.s<0)?a.negate():a.clone();\n\t      if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }\n\t      var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n\t      if(g < 0) return x;\n\t      if(i < g) g = i;\n\t      if(g > 0) {\n\t        x.rShiftTo(g,x);\n\t        y.rShiftTo(g,y);\n\t      }\n\t      while(x.signum() > 0) {\n\t        if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);\n\t        if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);\n\t        if(x.compareTo(y) >= 0) {\n\t          x.subTo(y,x);\n\t          x.rShiftTo(1,x);\n\t        }\n\t        else {\n\t          y.subTo(x,y);\n\t          y.rShiftTo(1,y);\n\t        }\n\t      }\n\t      if(g > 0) y.lShiftTo(g,y);\n\t      return y;\n\t    }\n\t\n\t    // (protected) this % n, n < 2^26\n\t    function bnpModInt(n) {\n\t      if(n <= 0) return 0;\n\t      var d = this.DV%n, r = (this.s<0)?n-1:0;\n\t      if(this.t > 0)\n\t        if(d == 0) r = this[0]%n;\n\t        else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;\n\t      return r;\n\t    }\n\t\n\t    // (public) 1/this % m (HAC 14.61)\n\t    function bnModInverse(m) {\n\t      var ac = m.isEven();\n\t      if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\n\t      var u = m.clone(), v = this.clone();\n\t      var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\n\t      while(u.signum() != 0) {\n\t        while(u.isEven()) {\n\t          u.rShiftTo(1,u);\n\t          if(ac) {\n\t            if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }\n\t            a.rShiftTo(1,a);\n\t          }\n\t          else if(!b.isEven()) b.subTo(m,b);\n\t          b.rShiftTo(1,b);\n\t        }\n\t        while(v.isEven()) {\n\t          v.rShiftTo(1,v);\n\t          if(ac) {\n\t            if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }\n\t            c.rShiftTo(1,c);\n\t          }\n\t          else if(!d.isEven()) d.subTo(m,d);\n\t          d.rShiftTo(1,d);\n\t        }\n\t        if(u.compareTo(v) >= 0) {\n\t          u.subTo(v,u);\n\t          if(ac) a.subTo(c,a);\n\t          b.subTo(d,b);\n\t        }\n\t        else {\n\t          v.subTo(u,v);\n\t          if(ac) c.subTo(a,c);\n\t          d.subTo(b,d);\n\t        }\n\t      }\n\t      if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n\t      if(d.compareTo(m) >= 0) return d.subtract(m);\n\t      if(d.signum() < 0) d.addTo(m,d); else return d;\n\t      if(d.signum() < 0) return d.add(m); else return d;\n\t    }\n\t\n\t    var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\n\t    var lplim = (1<<26)/lowprimes[lowprimes.length-1];\n\t\n\t    // (public) test primality with certainty >= 1-.5^t\n\t    function bnIsProbablePrime(t) {\n\t      var i, x = this.abs();\n\t      if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {\n\t        for(i = 0; i < lowprimes.length; ++i)\n\t          if(x[0] == lowprimes[i]) return true;\n\t        return false;\n\t      }\n\t      if(x.isEven()) return false;\n\t      i = 1;\n\t      while(i < lowprimes.length) {\n\t        var m = lowprimes[i], j = i+1;\n\t        while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n\t        m = x.modInt(m);\n\t        while(i < j) if(m%lowprimes[i++] == 0) return false;\n\t      }\n\t      return x.millerRabin(t);\n\t    }\n\t\n\t    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n\t    function bnpMillerRabin(t) {\n\t      var n1 = this.subtract(BigInteger.ONE);\n\t      var k = n1.getLowestSetBit();\n\t      if(k <= 0) return false;\n\t      var r = n1.shiftRight(k);\n\t      t = (t+1)>>1;\n\t      if(t > lowprimes.length) t = lowprimes.length;\n\t      var a = nbi();\n\t      for(var i = 0; i < t; ++i) {\n\t        //Pick bases at random, instead of starting at 2\n\t        a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);\n\t        var y = a.modPow(r,this);\n\t        if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n\t          var j = 1;\n\t          while(j++ < k && y.compareTo(n1) != 0) {\n\t            y = y.modPowInt(2,this);\n\t            if(y.compareTo(BigInteger.ONE) == 0) return false;\n\t          }\n\t          if(y.compareTo(n1) != 0) return false;\n\t        }\n\t      }\n\t      return true;\n\t    }\n\t\n\t    // protected\n\t    BigInteger.prototype.chunkSize = bnpChunkSize;\n\t    BigInteger.prototype.toRadix = bnpToRadix;\n\t    BigInteger.prototype.fromRadix = bnpFromRadix;\n\t    BigInteger.prototype.fromNumber = bnpFromNumber;\n\t    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n\t    BigInteger.prototype.changeBit = bnpChangeBit;\n\t    BigInteger.prototype.addTo = bnpAddTo;\n\t    BigInteger.prototype.dMultiply = bnpDMultiply;\n\t    BigInteger.prototype.dAddOffset = bnpDAddOffset;\n\t    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n\t    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n\t    BigInteger.prototype.modInt = bnpModInt;\n\t    BigInteger.prototype.millerRabin = bnpMillerRabin;\n\t\n\t    // public\n\t    BigInteger.prototype.clone = bnClone;\n\t    BigInteger.prototype.intValue = bnIntValue;\n\t    BigInteger.prototype.byteValue = bnByteValue;\n\t    BigInteger.prototype.shortValue = bnShortValue;\n\t    BigInteger.prototype.signum = bnSigNum;\n\t    BigInteger.prototype.toByteArray = bnToByteArray;\n\t    BigInteger.prototype.equals = bnEquals;\n\t    BigInteger.prototype.min = bnMin;\n\t    BigInteger.prototype.max = bnMax;\n\t    BigInteger.prototype.and = bnAnd;\n\t    BigInteger.prototype.or = bnOr;\n\t    BigInteger.prototype.xor = bnXor;\n\t    BigInteger.prototype.andNot = bnAndNot;\n\t    BigInteger.prototype.not = bnNot;\n\t    BigInteger.prototype.shiftLeft = bnShiftLeft;\n\t    BigInteger.prototype.shiftRight = bnShiftRight;\n\t    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n\t    BigInteger.prototype.bitCount = bnBitCount;\n\t    BigInteger.prototype.testBit = bnTestBit;\n\t    BigInteger.prototype.setBit = bnSetBit;\n\t    BigInteger.prototype.clearBit = bnClearBit;\n\t    BigInteger.prototype.flipBit = bnFlipBit;\n\t    BigInteger.prototype.add = bnAdd;\n\t    BigInteger.prototype.subtract = bnSubtract;\n\t    BigInteger.prototype.multiply = bnMultiply;\n\t    BigInteger.prototype.divide = bnDivide;\n\t    BigInteger.prototype.remainder = bnRemainder;\n\t    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n\t    BigInteger.prototype.modPow = bnModPow;\n\t    BigInteger.prototype.modInverse = bnModInverse;\n\t    BigInteger.prototype.pow = bnPow;\n\t    BigInteger.prototype.gcd = bnGCD;\n\t    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n\t\n\t    // JSBN-specific extension\n\t    BigInteger.prototype.square = bnSquare;\n\t\n\t    // Expose the Barrett function\n\t    BigInteger.prototype.Barrett = Barrett\n\t\n\t    // BigInteger interfaces not implemented in jsbn:\n\t\n\t    // BigInteger(int signum, byte[] magnitude)\n\t    // double doubleValue()\n\t    // float floatValue()\n\t    // int hashCode()\n\t    // long longValue()\n\t    // static BigInteger valueOf(long val)\n\t\n\t\t// Random number generator - requires a PRNG backend, e.g. prng4.js\n\t\n\t\t// For best results, put code like\n\t\t// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n\t\t// in your main HTML document.\n\t\n\t\tvar rng_state;\n\t\tvar rng_pool;\n\t\tvar rng_pptr;\n\t\n\t\t// Mix in a 32-bit integer into the pool\n\t\tfunction rng_seed_int(x) {\n\t\t  rng_pool[rng_pptr++] ^= x & 255;\n\t\t  rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n\t\t  rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n\t\t  rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n\t\t  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n\t\t}\n\t\n\t\t// Mix in the current time (w/milliseconds) into the pool\n\t\tfunction rng_seed_time() {\n\t\t  rng_seed_int(new Date().getTime());\n\t\t}\n\t\n\t\t// Initialize the pool with junk if needed.\n\t\tif(rng_pool == null) {\n\t\t  rng_pool = new Array();\n\t\t  rng_pptr = 0;\n\t\t  var t;\n\t\t  if(typeof window !== \"undefined\" && window.crypto) {\n\t\t\tif (window.crypto.getRandomValues) {\n\t\t\t  // Use webcrypto if available\n\t\t\t  var ua = new Uint8Array(32);\n\t\t\t  window.crypto.getRandomValues(ua);\n\t\t\t  for(t = 0; t < 32; ++t)\n\t\t\t\trng_pool[rng_pptr++] = ua[t];\n\t\t\t}\n\t\t\telse if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\") {\n\t\t\t  // Extract entropy (256 bits) from NS4 RNG if available\n\t\t\t  var z = window.crypto.random(32);\n\t\t\t  for(t = 0; t < z.length; ++t)\n\t\t\t\trng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n\t\t\t}\n\t\t  }\n\t\t  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n\t\t\tt = Math.floor(65536 * Math.random());\n\t\t\trng_pool[rng_pptr++] = t >>> 8;\n\t\t\trng_pool[rng_pptr++] = t & 255;\n\t\t  }\n\t\t  rng_pptr = 0;\n\t\t  rng_seed_time();\n\t\t  //rng_seed_int(window.screenX);\n\t\t  //rng_seed_int(window.screenY);\n\t\t}\n\t\n\t\tfunction rng_get_byte() {\n\t\t  if(rng_state == null) {\n\t\t\trng_seed_time();\n\t\t\trng_state = prng_newstate();\n\t\t\trng_state.init(rng_pool);\n\t\t\tfor(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n\t\t\t  rng_pool[rng_pptr] = 0;\n\t\t\trng_pptr = 0;\n\t\t\t//rng_pool = null;\n\t\t  }\n\t\t  // TODO: allow reseeding after first request\n\t\t  return rng_state.next();\n\t\t}\n\t\n\t\tfunction rng_get_bytes(ba) {\n\t\t  var i;\n\t\t  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n\t\t}\n\t\n\t\tfunction SecureRandom() {}\n\t\n\t\tSecureRandom.prototype.nextBytes = rng_get_bytes;\n\t\n\t\t// prng4.js - uses Arcfour as a PRNG\n\t\n\t\tfunction Arcfour() {\n\t\t  this.i = 0;\n\t\t  this.j = 0;\n\t\t  this.S = new Array();\n\t\t}\n\t\n\t\t// Initialize arcfour context from key, an array of ints, each from [0..255]\n\t\tfunction ARC4init(key) {\n\t\t  var i, j, t;\n\t\t  for(i = 0; i < 256; ++i)\n\t\t\tthis.S[i] = i;\n\t\t  j = 0;\n\t\t  for(i = 0; i < 256; ++i) {\n\t\t\tj = (j + this.S[i] + key[i % key.length]) & 255;\n\t\t\tt = this.S[i];\n\t\t\tthis.S[i] = this.S[j];\n\t\t\tthis.S[j] = t;\n\t\t  }\n\t\t  this.i = 0;\n\t\t  this.j = 0;\n\t\t}\n\t\n\t\tfunction ARC4next() {\n\t\t  var t;\n\t\t  this.i = (this.i + 1) & 255;\n\t\t  this.j = (this.j + this.S[this.i]) & 255;\n\t\t  t = this.S[this.i];\n\t\t  this.S[this.i] = this.S[this.j];\n\t\t  this.S[this.j] = t;\n\t\t  return this.S[(t + this.S[this.i]) & 255];\n\t\t}\n\t\n\t\tArcfour.prototype.init = ARC4init;\n\t\tArcfour.prototype.next = ARC4next;\n\t\n\t\t// Plug in your RNG constructor here\n\t\tfunction prng_newstate() {\n\t\t  return new Arcfour();\n\t\t}\n\t\n\t\t// Pool size must be a multiple of 4 and greater than 32.\n\t\t// An array of bytes the size of the pool will be passed to init()\n\t\tvar rng_psize = 256;\n\t\n\t  BigInteger.SecureRandom = SecureRandom;\n\t  BigInteger.BigInteger = BigInteger;\n\t  if (true) {\n\t    exports = module.exports = BigInteger;\n\t  } else {\n\t    this.BigInteger = BigInteger;\n\t    this.SecureRandom = SecureRandom;\n\t  }\n\t\n\t}).call(this);\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t// Random number generator - requires a PRNG backend, e.g. prng4.js\n\t\n\t\n\t// prng4.js - uses Arcfour as a PRNG\n\t\n\tfunction Arcfour() {\n\t  this.i = 0;\n\t  this.j = 0;\n\t  this.S = new Array();\n\t}\n\t\n\t// Initialize arcfour context from key, an array of ints, each from [0..255]\n\tfunction ARC4init(key) {\n\t  var i, j, t;\n\t  for(i = 0; i < 256; ++i)\n\t    this.S[i] = i;\n\t  j = 0;\n\t  for(i = 0; i < 256; ++i) {\n\t    j = (j + this.S[i] + key[i % key.length]) & 255;\n\t    t = this.S[i];\n\t    this.S[i] = this.S[j];\n\t    this.S[j] = t;\n\t  }\n\t  this.i = 0;\n\t  this.j = 0;\n\t}\n\t\n\tfunction ARC4next() {\n\t  var t;\n\t  this.i = (this.i + 1) & 255;\n\t  this.j = (this.j + this.S[this.i]) & 255;\n\t  t = this.S[this.i];\n\t  this.S[this.i] = this.S[this.j];\n\t  this.S[this.j] = t;\n\t  return this.S[(t + this.S[this.i]) & 255];\n\t}\n\t\n\tArcfour.prototype.init = ARC4init;\n\tArcfour.prototype.next = ARC4next;\n\t\n\t// Plug in your RNG constructor here\n\tfunction prng_newstate() {\n\t  return new Arcfour();\n\t}\n\t\n\t// Pool size must be a multiple of 4 and greater than 32.\n\t// An array of bytes the size of the pool will be passed to init()\n\tvar rng_psize = 256;\n\t\n\t\n\t// For best results, put code like\n\t// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n\t// in your main HTML document.\n\t\n\tvar rng_state;\n\tvar rng_pool;\n\tvar rng_pptr;\n\tvar window = {}\n\tvar navigator = {}\n\t// Mix in a 32-bit integer into the pool\n\tfunction rng_seed_int(x) {\n\t  rng_pool[rng_pptr++] ^= x & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n\t  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n\t}\n\t\n\t// Mix in the current time (w/milliseconds) into the pool\n\tfunction rng_seed_time() {\n\t  rng_seed_int(new Date().getTime());\n\t}\n\t\n\t// Initialize the pool with junk if needed.\n\tif(rng_pool == null) {\n\t  rng_pool = new Array();\n\t  rng_pptr = 0;\n\t  var t;\n\t  if(window && window.crypto && window.crypto.getRandomValues) {\n\t    // Use webcrypto if available\n\t    var ua = new Uint8Array(32);\n\t    window.crypto.getRandomValues(ua);\n\t    for(t = 0; t < 32; ++t)\n\t      rng_pool[rng_pptr++] = ua[t];\n\t  }\n\t  if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\" && window.crypto) {\n\t    // Extract entropy (256 bits) from NS4 RNG if available\n\t    var z = window.crypto.random(32);\n\t    for(t = 0; t < z.length; ++t)\n\t      rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n\t  }\n\t  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n\t    t = Math.floor(65536 * Math.random());\n\t    rng_pool[rng_pptr++] = t >>> 8;\n\t    rng_pool[rng_pptr++] = t & 255;\n\t  }\n\t  rng_pptr = 0;\n\t  rng_seed_time();\n\t  //rng_seed_int(window.screenX);\n\t  //rng_seed_int(window.screenY);\n\t}\n\t\n\tfunction rng_get_byte() {\n\t  if(rng_state == null) {\n\t    rng_seed_time();\n\t    rng_state = prng_newstate();\n\t    rng_state.init(rng_pool);\n\t    for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n\t      rng_pool[rng_pptr] = 0;\n\t    rng_pptr = 0;\n\t    //rng_pool = null;\n\t  }\n\t  // TODO: allow reseeding after first request\n\t  return rng_state.next();\n\t}\n\t\n\tfunction rng_get_bytes(ba) {\n\t  var i;\n\t  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n\t}\n\t\n\tfunction SecureRandom() {}\n\t\n\tSecureRandom.prototype.nextBytes = rng_get_bytes;\n\t\n\tmodule.exports = SecureRandom;\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// morfina-js.sfx.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8ce335e71641948134c3","import * as p from '../lib/paillier';\n\nexport const num = 3;\nconsole.log('paillier', p);\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","////////////////////////////////////////////////////////////////////////////////////\n//\n// paillier.js: a simple proof-of-concept Javascript implementation of the\n// Paillier homomorphic encryption system.\n//\n// Author: Maarten H. Everts (TNO)\n//\n// Dependencies: jsbn, from http://www-cs-students.stanford.edu/~tjw/jsbn/\n//  (you will need at least jsbn.js, jsbn2.js, prng4.js, and rng.js)\n// See the demo page on how to use it.\n//\n////////////////////////////////////////////////////////////////////////////////////\nvar BigInteger = require('jsbn').BigInteger;\n\nvar SecureRandom = require('./jsbn/rng');\n\nfunction lcm(a,b) {\n  return a.multiply(b).divide(a.gcd(b));\n}\n\npaillier = {\n\tpublicKey: function(bits, n) {\n\t\t// bits\n\t\tthis.bits = bits;\n\t\t// n\n\t\tthis.n = n;\n\t\t// n2 (cached n^2)\n\t\tthis.n2 = n.square();\n\t\t// np1 (cached n+1)\n\t\tthis.np1 = n.add(BigInteger.ONE);\n\t\tthis.rncache = new Array();\n\t},\n\tprivateKey: function(lambda, pubkey) {\n\t\t// lambda\n\t\tthis.lambda = lambda;\n\t\tthis.pubkey = pubkey;\n\t\t// x (cached) for decryption\n\t\tthis.x = pubkey.np1.modPow(this.lambda,pubkey.n2).subtract(BigInteger.ONE).divide(pubkey.n).modInverse(pubkey.n);\n\t},\n\tgenerateKeys: function(modulusbits) {\n\t\tvar p, q, n, keys = {}, rng = new SecureRandom();\n\t\tdo {\n\t\t\tdo {\n\t\t\t\tp = new BigInteger(modulusbits>>1,1,rng);\n\t\t\t} while (!p.isProbablePrime(10));\n\n\t\t\tdo {\n\t\t\t\tq = new BigInteger(modulusbits>>1,1,rng);\n\t\t\t} while(!q.isProbablePrime(10));\n\n\t\t\tn = p.multiply(q);\n\t\t} while(!(n.testBit(modulusbits - 1)) || (p.compareTo(q) == 0));\n\t\tkeys.pub = new paillier.publicKey(modulusbits,n);\n\t\tlambda = lcm(p.subtract(BigInteger.ONE),q.subtract(BigInteger.ONE));\n\t\tkeys.sec = new paillier.privateKey(lambda, keys.pub);\n\t\treturn keys;\n\t}\n}\n\n\npaillier.publicKey.prototype = {\n\tencrypt: function(m) {\n\t\treturn this.randomize(this.n.multiply(m).add(BigInteger.ONE).mod(this.n2));\n\t},\n\tadd: function(a,b) {\n\t\treturn a.multiply(b).remainder(this.n2);\n\t},\n\tmult: function(a,b) {\n\t\treturn a.modPow(b, this.n2);\n\t},\n\trandomize: function(a) {\n\t\tvar rn;\n\t\tif (this.rncache.length > 0) {\n\t\t\trn = this.rncache.pop();\n\t\t} else {\n\t\t\trn = this.getRN();\n\t\t}\n\t\treturn (a.multiply(rn)).mod(this.n2);\n\t},\n\tgetRN: function() {\n\t\tvar r, rng = new SecureRandom();\n\t\tdo {\n\t\t\tr = new BigInteger(this.bits,rng);\n\t\t\t// make sure r <= n\n\t\t} while(r.compareTo(this.n) >= 0);\n\t\treturn r.modPow(this.n, this.n2);\n\t},\n\t// Precompute values to make future invokations of encrypt and randomize (significantly) faster.\n\t// n is the number of precomputed values.\n\tprecompute: function(n) {\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\tthis.rncache.push(this.getRN());\n\t\t}\n\t}\n}\n\npaillier.privateKey.prototype = {\n\tdecrypt: function(c) {\n\t\treturn c.modPow(this.lambda,this.pubkey.n2).subtract(BigInteger.ONE).divide(this.pubkey.n).multiply(this.x).mod(this.pubkey.n);\n\t}\n}\n\nmodule.exports = paillier;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/paillier.js\n// module id = 1\n// module chunks = 0","(function(){\n\n    // Copyright (c) 2005  Tom Wu\n    // All Rights Reserved.\n    // See \"LICENSE\" for details.\n\n    // Basic JavaScript BN library - subset useful for RSA encryption.\n\n    // Bits per digit\n    var dbits;\n\n    // JavaScript engine analysis\n    var canary = 0xdeadbeefcafe;\n    var j_lm = ((canary&0xffffff)==0xefcafe);\n\n    // (public) Constructor\n    function BigInteger(a,b,c) {\n      if(a != null)\n        if(\"number\" == typeof a) this.fromNumber(a,b,c);\n        else if(b == null && \"string\" != typeof a) this.fromString(a,256);\n        else this.fromString(a,b);\n    }\n\n    // return new, unset BigInteger\n    function nbi() { return new BigInteger(null); }\n\n    // am: Compute w_j += (x*this_i), propagate carries,\n    // c is initial carry, returns final carry.\n    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n    // We need to select the fastest one that works in this environment.\n\n    // am1: use a single mult and divide to get the high bits,\n    // max digit bits should be 26 because\n    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n    function am1(i,x,w,j,c,n) {\n      while(--n >= 0) {\n        var v = x*this[i++]+w[j]+c;\n        c = Math.floor(v/0x4000000);\n        w[j++] = v&0x3ffffff;\n      }\n      return c;\n    }\n    // am2 avoids a big mult-and-extract completely.\n    // Max digit bits should be <= 30 because we do bitwise ops\n    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n    function am2(i,x,w,j,c,n) {\n      var xl = x&0x7fff, xh = x>>15;\n      while(--n >= 0) {\n        var l = this[i]&0x7fff;\n        var h = this[i++]>>15;\n        var m = xh*l+h*xl;\n        l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);\n        c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);\n        w[j++] = l&0x3fffffff;\n      }\n      return c;\n    }\n    // Alternately, set max digit bits to 28 since some\n    // browsers slow down when dealing with 32-bit numbers.\n    function am3(i,x,w,j,c,n) {\n      var xl = x&0x3fff, xh = x>>14;\n      while(--n >= 0) {\n        var l = this[i]&0x3fff;\n        var h = this[i++]>>14;\n        var m = xh*l+h*xl;\n        l = xl*l+((m&0x3fff)<<14)+w[j]+c;\n        c = (l>>28)+(m>>14)+xh*h;\n        w[j++] = l&0xfffffff;\n      }\n      return c;\n    }\n    var inBrowser = typeof navigator !== \"undefined\";\n    if(inBrowser && j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n      BigInteger.prototype.am = am2;\n      dbits = 30;\n    }\n    else if(inBrowser && j_lm && (navigator.appName != \"Netscape\")) {\n      BigInteger.prototype.am = am1;\n      dbits = 26;\n    }\n    else { // Mozilla/Netscape seems to prefer am3\n      BigInteger.prototype.am = am3;\n      dbits = 28;\n    }\n\n    BigInteger.prototype.DB = dbits;\n    BigInteger.prototype.DM = ((1<<dbits)-1);\n    BigInteger.prototype.DV = (1<<dbits);\n\n    var BI_FP = 52;\n    BigInteger.prototype.FV = Math.pow(2,BI_FP);\n    BigInteger.prototype.F1 = BI_FP-dbits;\n    BigInteger.prototype.F2 = 2*dbits-BI_FP;\n\n    // Digit conversions\n    var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    var BI_RC = new Array();\n    var rr,vv;\n    rr = \"0\".charCodeAt(0);\n    for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\n    rr = \"a\".charCodeAt(0);\n    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n    rr = \"A\".charCodeAt(0);\n    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\n    function int2char(n) { return BI_RM.charAt(n); }\n    function intAt(s,i) {\n      var c = BI_RC[s.charCodeAt(i)];\n      return (c==null)?-1:c;\n    }\n\n    // (protected) copy this to r\n    function bnpCopyTo(r) {\n      for(var i = this.t-1; i >= 0; --i) r[i] = this[i];\n      r.t = this.t;\n      r.s = this.s;\n    }\n\n    // (protected) set from integer value x, -DV <= x < DV\n    function bnpFromInt(x) {\n      this.t = 1;\n      this.s = (x<0)?-1:0;\n      if(x > 0) this[0] = x;\n      else if(x < -1) this[0] = x+this.DV;\n      else this.t = 0;\n    }\n\n    // return bigint initialized to value\n    function nbv(i) { var r = nbi(); r.fromInt(i); return r; }\n\n    // (protected) set from string and radix\n    function bnpFromString(s,b) {\n      var k;\n      if(b == 16) k = 4;\n      else if(b == 8) k = 3;\n      else if(b == 256) k = 8; // byte array\n      else if(b == 2) k = 1;\n      else if(b == 32) k = 5;\n      else if(b == 4) k = 2;\n      else { this.fromRadix(s,b); return; }\n      this.t = 0;\n      this.s = 0;\n      var i = s.length, mi = false, sh = 0;\n      while(--i >= 0) {\n        var x = (k==8)?s[i]&0xff:intAt(s,i);\n        if(x < 0) {\n          if(s.charAt(i) == \"-\") mi = true;\n          continue;\n        }\n        mi = false;\n        if(sh == 0)\n          this[this.t++] = x;\n        else if(sh+k > this.DB) {\n          this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;\n          this[this.t++] = (x>>(this.DB-sh));\n        }\n        else\n          this[this.t-1] |= x<<sh;\n        sh += k;\n        if(sh >= this.DB) sh -= this.DB;\n      }\n      if(k == 8 && (s[0]&0x80) != 0) {\n        this.s = -1;\n        if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;\n      }\n      this.clamp();\n      if(mi) BigInteger.ZERO.subTo(this,this);\n    }\n\n    // (protected) clamp off excess high words\n    function bnpClamp() {\n      var c = this.s&this.DM;\n      while(this.t > 0 && this[this.t-1] == c) --this.t;\n    }\n\n    // (public) return string representation in given radix\n    function bnToString(b) {\n      if(this.s < 0) return \"-\"+this.negate().toString(b);\n      var k;\n      if(b == 16) k = 4;\n      else if(b == 8) k = 3;\n      else if(b == 2) k = 1;\n      else if(b == 32) k = 5;\n      else if(b == 4) k = 2;\n      else return this.toRadix(b);\n      var km = (1<<k)-1, d, m = false, r = \"\", i = this.t;\n      var p = this.DB-(i*this.DB)%k;\n      if(i-- > 0) {\n        if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }\n        while(i >= 0) {\n          if(p < k) {\n            d = (this[i]&((1<<p)-1))<<(k-p);\n            d |= this[--i]>>(p+=this.DB-k);\n          }\n          else {\n            d = (this[i]>>(p-=k))&km;\n            if(p <= 0) { p += this.DB; --i; }\n          }\n          if(d > 0) m = true;\n          if(m) r += int2char(d);\n        }\n      }\n      return m?r:\"0\";\n    }\n\n    // (public) -this\n    function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }\n\n    // (public) |this|\n    function bnAbs() { return (this.s<0)?this.negate():this; }\n\n    // (public) return + if this > a, - if this < a, 0 if equal\n    function bnCompareTo(a) {\n      var r = this.s-a.s;\n      if(r != 0) return r;\n      var i = this.t;\n      r = i-a.t;\n      if(r != 0) return (this.s<0)?-r:r;\n      while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;\n      return 0;\n    }\n\n    // returns bit length of the integer x\n    function nbits(x) {\n      var r = 1, t;\n      if((t=x>>>16) != 0) { x = t; r += 16; }\n      if((t=x>>8) != 0) { x = t; r += 8; }\n      if((t=x>>4) != 0) { x = t; r += 4; }\n      if((t=x>>2) != 0) { x = t; r += 2; }\n      if((t=x>>1) != 0) { x = t; r += 1; }\n      return r;\n    }\n\n    // (public) return the number of bits in \"this\"\n    function bnBitLength() {\n      if(this.t <= 0) return 0;\n      return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));\n    }\n\n    // (protected) r = this << n*DB\n    function bnpDLShiftTo(n,r) {\n      var i;\n      for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];\n      for(i = n-1; i >= 0; --i) r[i] = 0;\n      r.t = this.t+n;\n      r.s = this.s;\n    }\n\n    // (protected) r = this >> n*DB\n    function bnpDRShiftTo(n,r) {\n      for(var i = n; i < this.t; ++i) r[i-n] = this[i];\n      r.t = Math.max(this.t-n,0);\n      r.s = this.s;\n    }\n\n    // (protected) r = this << n\n    function bnpLShiftTo(n,r) {\n      var bs = n%this.DB;\n      var cbs = this.DB-bs;\n      var bm = (1<<cbs)-1;\n      var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;\n      for(i = this.t-1; i >= 0; --i) {\n        r[i+ds+1] = (this[i]>>cbs)|c;\n        c = (this[i]&bm)<<bs;\n      }\n      for(i = ds-1; i >= 0; --i) r[i] = 0;\n      r[ds] = c;\n      r.t = this.t+ds+1;\n      r.s = this.s;\n      r.clamp();\n    }\n\n    // (protected) r = this >> n\n    function bnpRShiftTo(n,r) {\n      r.s = this.s;\n      var ds = Math.floor(n/this.DB);\n      if(ds >= this.t) { r.t = 0; return; }\n      var bs = n%this.DB;\n      var cbs = this.DB-bs;\n      var bm = (1<<bs)-1;\n      r[0] = this[ds]>>bs;\n      for(var i = ds+1; i < this.t; ++i) {\n        r[i-ds-1] |= (this[i]&bm)<<cbs;\n        r[i-ds] = this[i]>>bs;\n      }\n      if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;\n      r.t = this.t-ds;\n      r.clamp();\n    }\n\n    // (protected) r = this - a\n    function bnpSubTo(a,r) {\n      var i = 0, c = 0, m = Math.min(a.t,this.t);\n      while(i < m) {\n        c += this[i]-a[i];\n        r[i++] = c&this.DM;\n        c >>= this.DB;\n      }\n      if(a.t < this.t) {\n        c -= a.s;\n        while(i < this.t) {\n          c += this[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += this.s;\n      }\n      else {\n        c += this.s;\n        while(i < a.t) {\n          c -= a[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c -= a.s;\n      }\n      r.s = (c<0)?-1:0;\n      if(c < -1) r[i++] = this.DV+c;\n      else if(c > 0) r[i++] = c;\n      r.t = i;\n      r.clamp();\n    }\n\n    // (protected) r = this * a, r != this,a (HAC 14.12)\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyTo(a,r) {\n      var x = this.abs(), y = a.abs();\n      var i = x.t;\n      r.t = i+y.t;\n      while(--i >= 0) r[i] = 0;\n      for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);\n      r.s = 0;\n      r.clamp();\n      if(this.s != a.s) BigInteger.ZERO.subTo(r,r);\n    }\n\n    // (protected) r = this^2, r != this (HAC 14.16)\n    function bnpSquareTo(r) {\n      var x = this.abs();\n      var i = r.t = 2*x.t;\n      while(--i >= 0) r[i] = 0;\n      for(i = 0; i < x.t-1; ++i) {\n        var c = x.am(i,x[i],r,2*i,0,1);\n        if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {\n          r[i+x.t] -= x.DV;\n          r[i+x.t+1] = 1;\n        }\n      }\n      if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);\n      r.s = 0;\n      r.clamp();\n    }\n\n    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n    // r != q, this != m.  q or r may be null.\n    function bnpDivRemTo(m,q,r) {\n      var pm = m.abs();\n      if(pm.t <= 0) return;\n      var pt = this.abs();\n      if(pt.t < pm.t) {\n        if(q != null) q.fromInt(0);\n        if(r != null) this.copyTo(r);\n        return;\n      }\n      if(r == null) r = nbi();\n      var y = nbi(), ts = this.s, ms = m.s;\n      var nsh = this.DB-nbits(pm[pm.t-1]);   // normalize modulus\n      if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }\n      else { pm.copyTo(y); pt.copyTo(r); }\n      var ys = y.t;\n      var y0 = y[ys-1];\n      if(y0 == 0) return;\n      var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);\n      var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;\n      var i = r.t, j = i-ys, t = (q==null)?nbi():q;\n      y.dlShiftTo(j,t);\n      if(r.compareTo(t) >= 0) {\n        r[r.t++] = 1;\n        r.subTo(t,r);\n      }\n      BigInteger.ONE.dlShiftTo(ys,t);\n      t.subTo(y,y);  // \"negative\" y so we can replace sub with am later\n      while(y.t < ys) y[y.t++] = 0;\n      while(--j >= 0) {\n        // Estimate quotient digit\n        var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);\n        if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {   // Try it out\n          y.dlShiftTo(j,t);\n          r.subTo(t,r);\n          while(r[i] < --qd) r.subTo(t,r);\n        }\n      }\n      if(q != null) {\n        r.drShiftTo(ys,q);\n        if(ts != ms) BigInteger.ZERO.subTo(q,q);\n      }\n      r.t = ys;\n      r.clamp();\n      if(nsh > 0) r.rShiftTo(nsh,r); // Denormalize remainder\n      if(ts < 0) BigInteger.ZERO.subTo(r,r);\n    }\n\n    // (public) this mod a\n    function bnMod(a) {\n      var r = nbi();\n      this.abs().divRemTo(a,null,r);\n      if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);\n      return r;\n    }\n\n    // Modular reduction using \"classic\" algorithm\n    function Classic(m) { this.m = m; }\n    function cConvert(x) {\n      if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n      else return x;\n    }\n    function cRevert(x) { return x; }\n    function cReduce(x) { x.divRemTo(this.m,null,x); }\n    function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n    function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    Classic.prototype.convert = cConvert;\n    Classic.prototype.revert = cRevert;\n    Classic.prototype.reduce = cReduce;\n    Classic.prototype.mulTo = cMulTo;\n    Classic.prototype.sqrTo = cSqrTo;\n\n    // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n    // justification:\n    //         xy == 1 (mod m)\n    //         xy =  1+km\n    //   xy(2-xy) = (1+km)(1-km)\n    // x[y(2-xy)] = 1-k^2m^2\n    // x[y(2-xy)] == 1 (mod m^2)\n    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n    // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n    function bnpInvDigit() {\n      if(this.t < 1) return 0;\n      var x = this[0];\n      if((x&1) == 0) return 0;\n      var y = x&3;       // y == 1/x mod 2^2\n      y = (y*(2-(x&0xf)*y))&0xf; // y == 1/x mod 2^4\n      y = (y*(2-(x&0xff)*y))&0xff;   // y == 1/x mod 2^8\n      y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;    // y == 1/x mod 2^16\n      // last step - calculate inverse mod DV directly;\n      // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n      y = (y*(2-x*y%this.DV))%this.DV;       // y == 1/x mod 2^dbits\n      // we really want the negative inverse, and -DV < y < DV\n      return (y>0)?this.DV-y:-y;\n    }\n\n    // Montgomery reduction\n    function Montgomery(m) {\n      this.m = m;\n      this.mp = m.invDigit();\n      this.mpl = this.mp&0x7fff;\n      this.mph = this.mp>>15;\n      this.um = (1<<(m.DB-15))-1;\n      this.mt2 = 2*m.t;\n    }\n\n    // xR mod m\n    function montConvert(x) {\n      var r = nbi();\n      x.abs().dlShiftTo(this.m.t,r);\n      r.divRemTo(this.m,null,r);\n      if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);\n      return r;\n    }\n\n    // x/R mod m\n    function montRevert(x) {\n      var r = nbi();\n      x.copyTo(r);\n      this.reduce(r);\n      return r;\n    }\n\n    // x = x/R mod m (HAC 14.32)\n    function montReduce(x) {\n      while(x.t <= this.mt2) // pad x so am has enough room later\n        x[x.t++] = 0;\n      for(var i = 0; i < this.m.t; ++i) {\n        // faster way of calculating u0 = x[i]*mp mod DV\n        var j = x[i]&0x7fff;\n        var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;\n        // use am to combine the multiply-shift-add into one call\n        j = i+this.m.t;\n        x[j] += this.m.am(0,u0,x,i,0,this.m.t);\n        // propagate carry\n        while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }\n      }\n      x.clamp();\n      x.drShiftTo(this.m.t,x);\n      if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n    }\n\n    // r = \"x^2/R mod m\"; x != r\n    function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    // r = \"xy/R mod m\"; x,y != r\n    function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\n    Montgomery.prototype.convert = montConvert;\n    Montgomery.prototype.revert = montRevert;\n    Montgomery.prototype.reduce = montReduce;\n    Montgomery.prototype.mulTo = montMulTo;\n    Montgomery.prototype.sqrTo = montSqrTo;\n\n    // (protected) true iff this is even\n    function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }\n\n    // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n    function bnpExp(e,z) {\n      if(e > 0xffffffff || e < 1) return BigInteger.ONE;\n      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;\n      g.copyTo(r);\n      while(--i >= 0) {\n        z.sqrTo(r,r2);\n        if((e&(1<<i)) > 0) z.mulTo(r2,g,r);\n        else { var t = r; r = r2; r2 = t; }\n      }\n      return z.revert(r);\n    }\n\n    // (public) this^e % m, 0 <= e < 2^32\n    function bnModPowInt(e,m) {\n      var z;\n      if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);\n      return this.exp(e,z);\n    }\n\n    // protected\n    BigInteger.prototype.copyTo = bnpCopyTo;\n    BigInteger.prototype.fromInt = bnpFromInt;\n    BigInteger.prototype.fromString = bnpFromString;\n    BigInteger.prototype.clamp = bnpClamp;\n    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n    BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n    BigInteger.prototype.lShiftTo = bnpLShiftTo;\n    BigInteger.prototype.rShiftTo = bnpRShiftTo;\n    BigInteger.prototype.subTo = bnpSubTo;\n    BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n    BigInteger.prototype.squareTo = bnpSquareTo;\n    BigInteger.prototype.divRemTo = bnpDivRemTo;\n    BigInteger.prototype.invDigit = bnpInvDigit;\n    BigInteger.prototype.isEven = bnpIsEven;\n    BigInteger.prototype.exp = bnpExp;\n\n    // public\n    BigInteger.prototype.toString = bnToString;\n    BigInteger.prototype.negate = bnNegate;\n    BigInteger.prototype.abs = bnAbs;\n    BigInteger.prototype.compareTo = bnCompareTo;\n    BigInteger.prototype.bitLength = bnBitLength;\n    BigInteger.prototype.mod = bnMod;\n    BigInteger.prototype.modPowInt = bnModPowInt;\n\n    // \"constants\"\n    BigInteger.ZERO = nbv(0);\n    BigInteger.ONE = nbv(1);\n\n    // Copyright (c) 2005-2009  Tom Wu\n    // All Rights Reserved.\n    // See \"LICENSE\" for details.\n\n    // Extended JavaScript BN functions, required for RSA private ops.\n\n    // Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n    // Version 1.2: square() API, isProbablePrime fix\n\n    // (public)\n    function bnClone() { var r = nbi(); this.copyTo(r); return r; }\n\n    // (public) return value as integer\n    function bnIntValue() {\n      if(this.s < 0) {\n        if(this.t == 1) return this[0]-this.DV;\n        else if(this.t == 0) return -1;\n      }\n      else if(this.t == 1) return this[0];\n      else if(this.t == 0) return 0;\n      // assumes 16 < DB < 32\n      return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];\n    }\n\n    // (public) return value as byte\n    function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }\n\n    // (public) return value as short (assumes DB>=16)\n    function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }\n\n    // (protected) return x s.t. r^x < DV\n    function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }\n\n    // (public) 0 if this == 0, 1 if this > 0\n    function bnSigNum() {\n      if(this.s < 0) return -1;\n      else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n      else return 1;\n    }\n\n    // (protected) convert to radix string\n    function bnpToRadix(b) {\n      if(b == null) b = 10;\n      if(this.signum() == 0 || b < 2 || b > 36) return \"0\";\n      var cs = this.chunkSize(b);\n      var a = Math.pow(b,cs);\n      var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n      this.divRemTo(d,y,z);\n      while(y.signum() > 0) {\n        r = (a+z.intValue()).toString(b).substr(1) + r;\n        y.divRemTo(d,y,z);\n      }\n      return z.intValue().toString(b) + r;\n    }\n\n    // (protected) convert from radix string\n    function bnpFromRadix(s,b) {\n      this.fromInt(0);\n      if(b == null) b = 10;\n      var cs = this.chunkSize(b);\n      var d = Math.pow(b,cs), mi = false, j = 0, w = 0;\n      for(var i = 0; i < s.length; ++i) {\n        var x = intAt(s,i);\n        if(x < 0) {\n          if(s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n          continue;\n        }\n        w = b*w+x;\n        if(++j >= cs) {\n          this.dMultiply(d);\n          this.dAddOffset(w,0);\n          j = 0;\n          w = 0;\n        }\n      }\n      if(j > 0) {\n        this.dMultiply(Math.pow(b,j));\n        this.dAddOffset(w,0);\n      }\n      if(mi) BigInteger.ZERO.subTo(this,this);\n    }\n\n    // (protected) alternate constructor\n    function bnpFromNumber(a,b,c) {\n      if(\"number\" == typeof b) {\n        // new BigInteger(int,int,RNG)\n        if(a < 2) this.fromInt(1);\n        else {\n          this.fromNumber(a,c);\n          if(!this.testBit(a-1))\t// force MSB set\n            this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);\n          if(this.isEven()) this.dAddOffset(1,0); // force odd\n          while(!this.isProbablePrime(b)) {\n            this.dAddOffset(2,0);\n            if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);\n          }\n        }\n      }\n      else {\n        // new BigInteger(int,RNG)\n        var x = new Array(), t = a&7;\n        x.length = (a>>3)+1;\n        b.nextBytes(x);\n        if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;\n        this.fromString(x,256);\n      }\n    }\n\n    // (public) convert to bigendian byte array\n    function bnToByteArray() {\n      var i = this.t, r = new Array();\n      r[0] = this.s;\n      var p = this.DB-(i*this.DB)%8, d, k = 0;\n      if(i-- > 0) {\n        if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)\n          r[k++] = d|(this.s<<(this.DB-p));\n        while(i >= 0) {\n          if(p < 8) {\n            d = (this[i]&((1<<p)-1))<<(8-p);\n            d |= this[--i]>>(p+=this.DB-8);\n          }\n          else {\n            d = (this[i]>>(p-=8))&0xff;\n            if(p <= 0) { p += this.DB; --i; }\n          }\n          if((d&0x80) != 0) d |= -256;\n          if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;\n          if(k > 0 || d != this.s) r[k++] = d;\n        }\n      }\n      return r;\n    }\n\n    function bnEquals(a) { return(this.compareTo(a)==0); }\n    function bnMin(a) { return(this.compareTo(a)<0)?this:a; }\n    function bnMax(a) { return(this.compareTo(a)>0)?this:a; }\n\n    // (protected) r = this op a (bitwise)\n    function bnpBitwiseTo(a,op,r) {\n      var i, f, m = Math.min(a.t,this.t);\n      for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);\n      if(a.t < this.t) {\n        f = a.s&this.DM;\n        for(i = m; i < this.t; ++i) r[i] = op(this[i],f);\n        r.t = this.t;\n      }\n      else {\n        f = this.s&this.DM;\n        for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);\n        r.t = a.t;\n      }\n      r.s = op(this.s,a.s);\n      r.clamp();\n    }\n\n    // (public) this & a\n    function op_and(x,y) { return x&y; }\n    function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }\n\n    // (public) this | a\n    function op_or(x,y) { return x|y; }\n    function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }\n\n    // (public) this ^ a\n    function op_xor(x,y) { return x^y; }\n    function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }\n\n    // (public) this & ~a\n    function op_andnot(x,y) { return x&~y; }\n    function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }\n\n    // (public) ~this\n    function bnNot() {\n      var r = nbi();\n      for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];\n      r.t = this.t;\n      r.s = ~this.s;\n      return r;\n    }\n\n    // (public) this << n\n    function bnShiftLeft(n) {\n      var r = nbi();\n      if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);\n      return r;\n    }\n\n    // (public) this >> n\n    function bnShiftRight(n) {\n      var r = nbi();\n      if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);\n      return r;\n    }\n\n    // return index of lowest 1-bit in x, x < 2^31\n    function lbit(x) {\n      if(x == 0) return -1;\n      var r = 0;\n      if((x&0xffff) == 0) { x >>= 16; r += 16; }\n      if((x&0xff) == 0) { x >>= 8; r += 8; }\n      if((x&0xf) == 0) { x >>= 4; r += 4; }\n      if((x&3) == 0) { x >>= 2; r += 2; }\n      if((x&1) == 0) ++r;\n      return r;\n    }\n\n    // (public) returns index of lowest 1-bit (or -1 if none)\n    function bnGetLowestSetBit() {\n      for(var i = 0; i < this.t; ++i)\n        if(this[i] != 0) return i*this.DB+lbit(this[i]);\n      if(this.s < 0) return this.t*this.DB;\n      return -1;\n    }\n\n    // return number of 1 bits in x\n    function cbit(x) {\n      var r = 0;\n      while(x != 0) { x &= x-1; ++r; }\n      return r;\n    }\n\n    // (public) return number of set bits\n    function bnBitCount() {\n      var r = 0, x = this.s&this.DM;\n      for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);\n      return r;\n    }\n\n    // (public) true iff nth bit is set\n    function bnTestBit(n) {\n      var j = Math.floor(n/this.DB);\n      if(j >= this.t) return(this.s!=0);\n      return((this[j]&(1<<(n%this.DB)))!=0);\n    }\n\n    // (protected) this op (1<<n)\n    function bnpChangeBit(n,op) {\n      var r = BigInteger.ONE.shiftLeft(n);\n      this.bitwiseTo(r,op,r);\n      return r;\n    }\n\n    // (public) this | (1<<n)\n    function bnSetBit(n) { return this.changeBit(n,op_or); }\n\n    // (public) this & ~(1<<n)\n    function bnClearBit(n) { return this.changeBit(n,op_andnot); }\n\n    // (public) this ^ (1<<n)\n    function bnFlipBit(n) { return this.changeBit(n,op_xor); }\n\n    // (protected) r = this + a\n    function bnpAddTo(a,r) {\n      var i = 0, c = 0, m = Math.min(a.t,this.t);\n      while(i < m) {\n        c += this[i]+a[i];\n        r[i++] = c&this.DM;\n        c >>= this.DB;\n      }\n      if(a.t < this.t) {\n        c += a.s;\n        while(i < this.t) {\n          c += this[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += this.s;\n      }\n      else {\n        c += this.s;\n        while(i < a.t) {\n          c += a[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += a.s;\n      }\n      r.s = (c<0)?-1:0;\n      if(c > 0) r[i++] = c;\n      else if(c < -1) r[i++] = this.DV+c;\n      r.t = i;\n      r.clamp();\n    }\n\n    // (public) this + a\n    function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }\n\n    // (public) this - a\n    function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }\n\n    // (public) this * a\n    function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }\n\n    // (public) this^2\n    function bnSquare() { var r = nbi(); this.squareTo(r); return r; }\n\n    // (public) this / a\n    function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }\n\n    // (public) this % a\n    function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }\n\n    // (public) [this/a,this%a]\n    function bnDivideAndRemainder(a) {\n      var q = nbi(), r = nbi();\n      this.divRemTo(a,q,r);\n      return new Array(q,r);\n    }\n\n    // (protected) this *= n, this >= 0, 1 < n < DV\n    function bnpDMultiply(n) {\n      this[this.t] = this.am(0,n-1,this,0,0,this.t);\n      ++this.t;\n      this.clamp();\n    }\n\n    // (protected) this += n << w words, this >= 0\n    function bnpDAddOffset(n,w) {\n      if(n == 0) return;\n      while(this.t <= w) this[this.t++] = 0;\n      this[w] += n;\n      while(this[w] >= this.DV) {\n        this[w] -= this.DV;\n        if(++w >= this.t) this[this.t++] = 0;\n        ++this[w];\n      }\n    }\n\n    // A \"null\" reducer\n    function NullExp() {}\n    function nNop(x) { return x; }\n    function nMulTo(x,y,r) { x.multiplyTo(y,r); }\n    function nSqrTo(x,r) { x.squareTo(r); }\n\n    NullExp.prototype.convert = nNop;\n    NullExp.prototype.revert = nNop;\n    NullExp.prototype.mulTo = nMulTo;\n    NullExp.prototype.sqrTo = nSqrTo;\n\n    // (public) this^e\n    function bnPow(e) { return this.exp(e,new NullExp()); }\n\n    // (protected) r = lower n words of \"this * a\", a.t <= n\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyLowerTo(a,n,r) {\n      var i = Math.min(this.t+a.t,n);\n      r.s = 0; // assumes a,this >= 0\n      r.t = i;\n      while(i > 0) r[--i] = 0;\n      var j;\n      for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);\n      for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);\n      r.clamp();\n    }\n\n    // (protected) r = \"this * a\" without lower n words, n > 0\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyUpperTo(a,n,r) {\n      --n;\n      var i = r.t = this.t+a.t-n;\n      r.s = 0; // assumes a,this >= 0\n      while(--i >= 0) r[i] = 0;\n      for(i = Math.max(n-this.t,0); i < a.t; ++i)\n        r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);\n      r.clamp();\n      r.drShiftTo(1,r);\n    }\n\n    // Barrett modular reduction\n    function Barrett(m) {\n      // setup Barrett\n      this.r2 = nbi();\n      this.q3 = nbi();\n      BigInteger.ONE.dlShiftTo(2*m.t,this.r2);\n      this.mu = this.r2.divide(m);\n      this.m = m;\n    }\n\n    function barrettConvert(x) {\n      if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);\n      else if(x.compareTo(this.m) < 0) return x;\n      else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }\n    }\n\n    function barrettRevert(x) { return x; }\n\n    // x = x mod m (HAC 14.42)\n    function barrettReduce(x) {\n      x.drShiftTo(this.m.t-1,this.r2);\n      if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }\n      this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);\n      this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);\n      while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);\n      x.subTo(this.r2,x);\n      while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n    }\n\n    // r = x^2 mod m; x != r\n    function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    // r = x*y mod m; x,y != r\n    function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\n    Barrett.prototype.convert = barrettConvert;\n    Barrett.prototype.revert = barrettRevert;\n    Barrett.prototype.reduce = barrettReduce;\n    Barrett.prototype.mulTo = barrettMulTo;\n    Barrett.prototype.sqrTo = barrettSqrTo;\n\n    // (public) this^e % m (HAC 14.85)\n    function bnModPow(e,m) {\n      var i = e.bitLength(), k, r = nbv(1), z;\n      if(i <= 0) return r;\n      else if(i < 18) k = 1;\n      else if(i < 48) k = 3;\n      else if(i < 144) k = 4;\n      else if(i < 768) k = 5;\n      else k = 6;\n      if(i < 8)\n        z = new Classic(m);\n      else if(m.isEven())\n        z = new Barrett(m);\n      else\n        z = new Montgomery(m);\n\n      // precomputation\n      var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;\n      g[1] = z.convert(this);\n      if(k > 1) {\n        var g2 = nbi();\n        z.sqrTo(g[1],g2);\n        while(n <= km) {\n          g[n] = nbi();\n          z.mulTo(g2,g[n-2],g[n]);\n          n += 2;\n        }\n      }\n\n      var j = e.t-1, w, is1 = true, r2 = nbi(), t;\n      i = nbits(e[j])-1;\n      while(j >= 0) {\n        if(i >= k1) w = (e[j]>>(i-k1))&km;\n        else {\n          w = (e[j]&((1<<(i+1))-1))<<(k1-i);\n          if(j > 0) w |= e[j-1]>>(this.DB+i-k1);\n        }\n\n        n = k;\n        while((w&1) == 0) { w >>= 1; --n; }\n        if((i -= n) < 0) { i += this.DB; --j; }\n        if(is1) {\t// ret == 1, don't bother squaring or multiplying it\n          g[w].copyTo(r);\n          is1 = false;\n        }\n        else {\n          while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }\n          if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }\n          z.mulTo(r2,g[w],r);\n        }\n\n        while(j >= 0 && (e[j]&(1<<i)) == 0) {\n          z.sqrTo(r,r2); t = r; r = r2; r2 = t;\n          if(--i < 0) { i = this.DB-1; --j; }\n        }\n      }\n      return z.revert(r);\n    }\n\n    // (public) gcd(this,a) (HAC 14.54)\n    function bnGCD(a) {\n      var x = (this.s<0)?this.negate():this.clone();\n      var y = (a.s<0)?a.negate():a.clone();\n      if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }\n      var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n      if(g < 0) return x;\n      if(i < g) g = i;\n      if(g > 0) {\n        x.rShiftTo(g,x);\n        y.rShiftTo(g,y);\n      }\n      while(x.signum() > 0) {\n        if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);\n        if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);\n        if(x.compareTo(y) >= 0) {\n          x.subTo(y,x);\n          x.rShiftTo(1,x);\n        }\n        else {\n          y.subTo(x,y);\n          y.rShiftTo(1,y);\n        }\n      }\n      if(g > 0) y.lShiftTo(g,y);\n      return y;\n    }\n\n    // (protected) this % n, n < 2^26\n    function bnpModInt(n) {\n      if(n <= 0) return 0;\n      var d = this.DV%n, r = (this.s<0)?n-1:0;\n      if(this.t > 0)\n        if(d == 0) r = this[0]%n;\n        else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;\n      return r;\n    }\n\n    // (public) 1/this % m (HAC 14.61)\n    function bnModInverse(m) {\n      var ac = m.isEven();\n      if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\n      var u = m.clone(), v = this.clone();\n      var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\n      while(u.signum() != 0) {\n        while(u.isEven()) {\n          u.rShiftTo(1,u);\n          if(ac) {\n            if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }\n            a.rShiftTo(1,a);\n          }\n          else if(!b.isEven()) b.subTo(m,b);\n          b.rShiftTo(1,b);\n        }\n        while(v.isEven()) {\n          v.rShiftTo(1,v);\n          if(ac) {\n            if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }\n            c.rShiftTo(1,c);\n          }\n          else if(!d.isEven()) d.subTo(m,d);\n          d.rShiftTo(1,d);\n        }\n        if(u.compareTo(v) >= 0) {\n          u.subTo(v,u);\n          if(ac) a.subTo(c,a);\n          b.subTo(d,b);\n        }\n        else {\n          v.subTo(u,v);\n          if(ac) c.subTo(a,c);\n          d.subTo(b,d);\n        }\n      }\n      if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n      if(d.compareTo(m) >= 0) return d.subtract(m);\n      if(d.signum() < 0) d.addTo(m,d); else return d;\n      if(d.signum() < 0) return d.add(m); else return d;\n    }\n\n    var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\n    var lplim = (1<<26)/lowprimes[lowprimes.length-1];\n\n    // (public) test primality with certainty >= 1-.5^t\n    function bnIsProbablePrime(t) {\n      var i, x = this.abs();\n      if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {\n        for(i = 0; i < lowprimes.length; ++i)\n          if(x[0] == lowprimes[i]) return true;\n        return false;\n      }\n      if(x.isEven()) return false;\n      i = 1;\n      while(i < lowprimes.length) {\n        var m = lowprimes[i], j = i+1;\n        while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n        m = x.modInt(m);\n        while(i < j) if(m%lowprimes[i++] == 0) return false;\n      }\n      return x.millerRabin(t);\n    }\n\n    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n    function bnpMillerRabin(t) {\n      var n1 = this.subtract(BigInteger.ONE);\n      var k = n1.getLowestSetBit();\n      if(k <= 0) return false;\n      var r = n1.shiftRight(k);\n      t = (t+1)>>1;\n      if(t > lowprimes.length) t = lowprimes.length;\n      var a = nbi();\n      for(var i = 0; i < t; ++i) {\n        //Pick bases at random, instead of starting at 2\n        a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);\n        var y = a.modPow(r,this);\n        if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n          var j = 1;\n          while(j++ < k && y.compareTo(n1) != 0) {\n            y = y.modPowInt(2,this);\n            if(y.compareTo(BigInteger.ONE) == 0) return false;\n          }\n          if(y.compareTo(n1) != 0) return false;\n        }\n      }\n      return true;\n    }\n\n    // protected\n    BigInteger.prototype.chunkSize = bnpChunkSize;\n    BigInteger.prototype.toRadix = bnpToRadix;\n    BigInteger.prototype.fromRadix = bnpFromRadix;\n    BigInteger.prototype.fromNumber = bnpFromNumber;\n    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n    BigInteger.prototype.changeBit = bnpChangeBit;\n    BigInteger.prototype.addTo = bnpAddTo;\n    BigInteger.prototype.dMultiply = bnpDMultiply;\n    BigInteger.prototype.dAddOffset = bnpDAddOffset;\n    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n    BigInteger.prototype.modInt = bnpModInt;\n    BigInteger.prototype.millerRabin = bnpMillerRabin;\n\n    // public\n    BigInteger.prototype.clone = bnClone;\n    BigInteger.prototype.intValue = bnIntValue;\n    BigInteger.prototype.byteValue = bnByteValue;\n    BigInteger.prototype.shortValue = bnShortValue;\n    BigInteger.prototype.signum = bnSigNum;\n    BigInteger.prototype.toByteArray = bnToByteArray;\n    BigInteger.prototype.equals = bnEquals;\n    BigInteger.prototype.min = bnMin;\n    BigInteger.prototype.max = bnMax;\n    BigInteger.prototype.and = bnAnd;\n    BigInteger.prototype.or = bnOr;\n    BigInteger.prototype.xor = bnXor;\n    BigInteger.prototype.andNot = bnAndNot;\n    BigInteger.prototype.not = bnNot;\n    BigInteger.prototype.shiftLeft = bnShiftLeft;\n    BigInteger.prototype.shiftRight = bnShiftRight;\n    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n    BigInteger.prototype.bitCount = bnBitCount;\n    BigInteger.prototype.testBit = bnTestBit;\n    BigInteger.prototype.setBit = bnSetBit;\n    BigInteger.prototype.clearBit = bnClearBit;\n    BigInteger.prototype.flipBit = bnFlipBit;\n    BigInteger.prototype.add = bnAdd;\n    BigInteger.prototype.subtract = bnSubtract;\n    BigInteger.prototype.multiply = bnMultiply;\n    BigInteger.prototype.divide = bnDivide;\n    BigInteger.prototype.remainder = bnRemainder;\n    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n    BigInteger.prototype.modPow = bnModPow;\n    BigInteger.prototype.modInverse = bnModInverse;\n    BigInteger.prototype.pow = bnPow;\n    BigInteger.prototype.gcd = bnGCD;\n    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n\n    // JSBN-specific extension\n    BigInteger.prototype.square = bnSquare;\n\n    // Expose the Barrett function\n    BigInteger.prototype.Barrett = Barrett\n\n    // BigInteger interfaces not implemented in jsbn:\n\n    // BigInteger(int signum, byte[] magnitude)\n    // double doubleValue()\n    // float floatValue()\n    // int hashCode()\n    // long longValue()\n    // static BigInteger valueOf(long val)\n\n\t// Random number generator - requires a PRNG backend, e.g. prng4.js\n\n\t// For best results, put code like\n\t// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n\t// in your main HTML document.\n\n\tvar rng_state;\n\tvar rng_pool;\n\tvar rng_pptr;\n\n\t// Mix in a 32-bit integer into the pool\n\tfunction rng_seed_int(x) {\n\t  rng_pool[rng_pptr++] ^= x & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n\t  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n\t}\n\n\t// Mix in the current time (w/milliseconds) into the pool\n\tfunction rng_seed_time() {\n\t  rng_seed_int(new Date().getTime());\n\t}\n\n\t// Initialize the pool with junk if needed.\n\tif(rng_pool == null) {\n\t  rng_pool = new Array();\n\t  rng_pptr = 0;\n\t  var t;\n\t  if(typeof window !== \"undefined\" && window.crypto) {\n\t\tif (window.crypto.getRandomValues) {\n\t\t  // Use webcrypto if available\n\t\t  var ua = new Uint8Array(32);\n\t\t  window.crypto.getRandomValues(ua);\n\t\t  for(t = 0; t < 32; ++t)\n\t\t\trng_pool[rng_pptr++] = ua[t];\n\t\t}\n\t\telse if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\") {\n\t\t  // Extract entropy (256 bits) from NS4 RNG if available\n\t\t  var z = window.crypto.random(32);\n\t\t  for(t = 0; t < z.length; ++t)\n\t\t\trng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n\t\t}\n\t  }\n\t  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n\t\tt = Math.floor(65536 * Math.random());\n\t\trng_pool[rng_pptr++] = t >>> 8;\n\t\trng_pool[rng_pptr++] = t & 255;\n\t  }\n\t  rng_pptr = 0;\n\t  rng_seed_time();\n\t  //rng_seed_int(window.screenX);\n\t  //rng_seed_int(window.screenY);\n\t}\n\n\tfunction rng_get_byte() {\n\t  if(rng_state == null) {\n\t\trng_seed_time();\n\t\trng_state = prng_newstate();\n\t\trng_state.init(rng_pool);\n\t\tfor(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n\t\t  rng_pool[rng_pptr] = 0;\n\t\trng_pptr = 0;\n\t\t//rng_pool = null;\n\t  }\n\t  // TODO: allow reseeding after first request\n\t  return rng_state.next();\n\t}\n\n\tfunction rng_get_bytes(ba) {\n\t  var i;\n\t  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n\t}\n\n\tfunction SecureRandom() {}\n\n\tSecureRandom.prototype.nextBytes = rng_get_bytes;\n\n\t// prng4.js - uses Arcfour as a PRNG\n\n\tfunction Arcfour() {\n\t  this.i = 0;\n\t  this.j = 0;\n\t  this.S = new Array();\n\t}\n\n\t// Initialize arcfour context from key, an array of ints, each from [0..255]\n\tfunction ARC4init(key) {\n\t  var i, j, t;\n\t  for(i = 0; i < 256; ++i)\n\t\tthis.S[i] = i;\n\t  j = 0;\n\t  for(i = 0; i < 256; ++i) {\n\t\tj = (j + this.S[i] + key[i % key.length]) & 255;\n\t\tt = this.S[i];\n\t\tthis.S[i] = this.S[j];\n\t\tthis.S[j] = t;\n\t  }\n\t  this.i = 0;\n\t  this.j = 0;\n\t}\n\n\tfunction ARC4next() {\n\t  var t;\n\t  this.i = (this.i + 1) & 255;\n\t  this.j = (this.j + this.S[this.i]) & 255;\n\t  t = this.S[this.i];\n\t  this.S[this.i] = this.S[this.j];\n\t  this.S[this.j] = t;\n\t  return this.S[(t + this.S[this.i]) & 255];\n\t}\n\n\tArcfour.prototype.init = ARC4init;\n\tArcfour.prototype.next = ARC4next;\n\n\t// Plug in your RNG constructor here\n\tfunction prng_newstate() {\n\t  return new Arcfour();\n\t}\n\n\t// Pool size must be a multiple of 4 and greater than 32.\n\t// An array of bytes the size of the pool will be passed to init()\n\tvar rng_psize = 256;\n\n  BigInteger.SecureRandom = SecureRandom;\n  BigInteger.BigInteger = BigInteger;\n  if (typeof exports !== 'undefined') {\n    exports = module.exports = BigInteger;\n  } else {\n    this.BigInteger = BigInteger;\n    this.SecureRandom = SecureRandom;\n  }\n\n}).call(this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jsbn/index.js\n// module id = 2\n// module chunks = 0","// Random number generator - requires a PRNG backend, e.g. prng4.js\n\n\n// prng4.js - uses Arcfour as a PRNG\n\nfunction Arcfour() {\n  this.i = 0;\n  this.j = 0;\n  this.S = new Array();\n}\n\n// Initialize arcfour context from key, an array of ints, each from [0..255]\nfunction ARC4init(key) {\n  var i, j, t;\n  for(i = 0; i < 256; ++i)\n    this.S[i] = i;\n  j = 0;\n  for(i = 0; i < 256; ++i) {\n    j = (j + this.S[i] + key[i % key.length]) & 255;\n    t = this.S[i];\n    this.S[i] = this.S[j];\n    this.S[j] = t;\n  }\n  this.i = 0;\n  this.j = 0;\n}\n\nfunction ARC4next() {\n  var t;\n  this.i = (this.i + 1) & 255;\n  this.j = (this.j + this.S[this.i]) & 255;\n  t = this.S[this.i];\n  this.S[this.i] = this.S[this.j];\n  this.S[this.j] = t;\n  return this.S[(t + this.S[this.i]) & 255];\n}\n\nArcfour.prototype.init = ARC4init;\nArcfour.prototype.next = ARC4next;\n\n// Plug in your RNG constructor here\nfunction prng_newstate() {\n  return new Arcfour();\n}\n\n// Pool size must be a multiple of 4 and greater than 32.\n// An array of bytes the size of the pool will be passed to init()\nvar rng_psize = 256;\n\n\n// For best results, put code like\n// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n// in your main HTML document.\n\nvar rng_state;\nvar rng_pool;\nvar rng_pptr;\nvar window = {}\nvar navigator = {}\n// Mix in a 32-bit integer into the pool\nfunction rng_seed_int(x) {\n  rng_pool[rng_pptr++] ^= x & 255;\n  rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n  rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n  rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n}\n\n// Mix in the current time (w/milliseconds) into the pool\nfunction rng_seed_time() {\n  rng_seed_int(new Date().getTime());\n}\n\n// Initialize the pool with junk if needed.\nif(rng_pool == null) {\n  rng_pool = new Array();\n  rng_pptr = 0;\n  var t;\n  if(window && window.crypto && window.crypto.getRandomValues) {\n    // Use webcrypto if available\n    var ua = new Uint8Array(32);\n    window.crypto.getRandomValues(ua);\n    for(t = 0; t < 32; ++t)\n      rng_pool[rng_pptr++] = ua[t];\n  }\n  if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\" && window.crypto) {\n    // Extract entropy (256 bits) from NS4 RNG if available\n    var z = window.crypto.random(32);\n    for(t = 0; t < z.length; ++t)\n      rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n  }\n  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n    t = Math.floor(65536 * Math.random());\n    rng_pool[rng_pptr++] = t >>> 8;\n    rng_pool[rng_pptr++] = t & 255;\n  }\n  rng_pptr = 0;\n  rng_seed_time();\n  //rng_seed_int(window.screenX);\n  //rng_seed_int(window.screenY);\n}\n\nfunction rng_get_byte() {\n  if(rng_state == null) {\n    rng_seed_time();\n    rng_state = prng_newstate();\n    rng_state.init(rng_pool);\n    for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n      rng_pool[rng_pptr] = 0;\n    rng_pptr = 0;\n    //rng_pool = null;\n  }\n  // TODO: allow reseeding after first request\n  return rng_state.next();\n}\n\nfunction rng_get_bytes(ba) {\n  var i;\n  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n}\n\nfunction SecureRandom() {}\n\nSecureRandom.prototype.nextBytes = rng_get_bytes;\n\nmodule.exports = SecureRandom;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/jsbn/rng.js\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}