{"version":3,"sources":["webpack:///morfina-js.node.min.js","webpack:///webpack/bootstrap e0594058cc89e222f0b6","webpack:///./src/index.ts","webpack:///./lib/paillier.js","webpack:///external \"jsbn\"","webpack:///./lib/jsbn/rng.js"],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Object","defineProperty","value","num","console","log","lcm","a","b","multiply","divide","gcd","BigInteger","SecureRandom","paillier","publicKey","bits","n","this","n2","square","np1","add","ONE","rncache","Array","privateKey","lambda","pubkey","x","modPow","subtract","modInverse","generateKeys","modulusbits","q","keys","rng","isProbablePrime","testBit","compareTo","pub","sec","prototype","encrypt","randomize","mod","remainder","mult","rn","length","pop","getRN","r","precompute","i","push","decrypt","require","Arcfour","j","S","ARC4init","key","t","ARC4next","prng_newstate","rng_seed_int","rng_pool","rng_pptr","rng_psize","rng_seed_time","Date","getTime","rng_get_byte","rng_state","init","next","rng_get_bytes","ba","window","navigator","crypto","getRandomValues","ua","Uint8Array","appName","appVersion","z","random","charCodeAt","Math","floor","nextBytes"],"mappings":"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","file":"morfina-js.node.min.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar p = __webpack_require__(1);\n\texports.num = 3;\n\tconsole.log('paillier', p);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t////////////////////////////////////////////////////////////////////////////////////\n\t//\n\t// paillier.js: a simple proof-of-concept Javascript implementation of the\n\t// Paillier homomorphic encryption system.\n\t//\n\t// Author: Maarten H. Everts (TNO)\n\t//\n\t// Dependencies: jsbn, from http://www-cs-students.stanford.edu/~tjw/jsbn/\n\t//  (you will need at least jsbn.js, jsbn2.js, prng4.js, and rng.js)\n\t// See the demo page on how to use it.\n\t//\n\t////////////////////////////////////////////////////////////////////////////////////\n\tvar BigInteger = __webpack_require__(2).BigInteger;\n\t\n\tvar SecureRandom = __webpack_require__(3);\n\t\n\tfunction lcm(a,b) {\n\t  return a.multiply(b).divide(a.gcd(b));\n\t}\n\t\n\tpaillier = {\n\t\tpublicKey: function(bits, n) {\n\t\t\t// bits\n\t\t\tthis.bits = bits;\n\t\t\t// n\n\t\t\tthis.n = n;\n\t\t\t// n2 (cached n^2)\n\t\t\tthis.n2 = n.square();\n\t\t\t// np1 (cached n+1)\n\t\t\tthis.np1 = n.add(BigInteger.ONE);\n\t\t\tthis.rncache = new Array();\n\t\t},\n\t\tprivateKey: function(lambda, pubkey) {\n\t\t\t// lambda\n\t\t\tthis.lambda = lambda;\n\t\t\tthis.pubkey = pubkey;\n\t\t\t// x (cached) for decryption\n\t\t\tthis.x = pubkey.np1.modPow(this.lambda,pubkey.n2).subtract(BigInteger.ONE).divide(pubkey.n).modInverse(pubkey.n);\n\t\t},\n\t\tgenerateKeys: function(modulusbits) {\n\t\t\tvar p, q, n, keys = {}, rng = new SecureRandom();\n\t\t\tdo {\n\t\t\t\tdo {\n\t\t\t\t\tp = new BigInteger(modulusbits>>1,1,rng);\n\t\t\t\t} while (!p.isProbablePrime(10));\n\t\n\t\t\t\tdo {\n\t\t\t\t\tq = new BigInteger(modulusbits>>1,1,rng);\n\t\t\t\t} while(!q.isProbablePrime(10));\n\t\n\t\t\t\tn = p.multiply(q);\n\t\t\t} while(!(n.testBit(modulusbits - 1)) || (p.compareTo(q) == 0));\n\t\t\tkeys.pub = new paillier.publicKey(modulusbits,n);\n\t\t\tlambda = lcm(p.subtract(BigInteger.ONE),q.subtract(BigInteger.ONE));\n\t\t\tkeys.sec = new paillier.privateKey(lambda, keys.pub);\n\t\t\treturn keys;\n\t\t}\n\t}\n\t\n\t\n\tpaillier.publicKey.prototype = {\n\t\tencrypt: function(m) {\n\t\t\treturn this.randomize(this.n.multiply(m).add(BigInteger.ONE).mod(this.n2));\n\t\t},\n\t\tadd: function(a,b) {\n\t\t\treturn a.multiply(b).remainder(this.n2);\n\t\t},\n\t\tmult: function(a,b) {\n\t\t\treturn a.modPow(b, this.n2);\n\t\t},\n\t\trandomize: function(a) {\n\t\t\tvar rn;\n\t\t\tif (this.rncache.length > 0) {\n\t\t\t\trn = this.rncache.pop();\n\t\t\t} else {\n\t\t\t\trn = this.getRN();\n\t\t\t}\n\t\t\treturn (a.multiply(rn)).mod(this.n2);\n\t\t},\n\t\tgetRN: function() {\n\t\t\tvar r, rng = new SecureRandom();\n\t\t\tdo {\n\t\t\t\tr = new BigInteger(this.bits,rng);\n\t\t\t\t// make sure r <= n\n\t\t\t} while(r.compareTo(this.n) >= 0);\n\t\t\treturn r.modPow(this.n, this.n2);\n\t\t},\n\t\t// Precompute values to make future invokations of encrypt and randomize (significantly) faster.\n\t\t// n is the number of precomputed values.\n\t\tprecompute: function(n) {\n\t\t\tfor (var i = 0; i < n; i++) {\n\t\t\t\tthis.rncache.push(this.getRN());\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpaillier.privateKey.prototype = {\n\t\tdecrypt: function(c) {\n\t\t\treturn c.modPow(this.lambda,this.pubkey.n2).subtract(BigInteger.ONE).divide(this.pubkey.n).multiply(this.x).mod(this.pubkey.n);\n\t\t}\n\t}\n\t\n\tmodule.exports = paillier;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"jsbn\");\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t// Random number generator - requires a PRNG backend, e.g. prng4.js\n\t\n\t\n\t// prng4.js - uses Arcfour as a PRNG\n\t\n\tfunction Arcfour() {\n\t  this.i = 0;\n\t  this.j = 0;\n\t  this.S = new Array();\n\t}\n\t\n\t// Initialize arcfour context from key, an array of ints, each from [0..255]\n\tfunction ARC4init(key) {\n\t  var i, j, t;\n\t  for(i = 0; i < 256; ++i)\n\t    this.S[i] = i;\n\t  j = 0;\n\t  for(i = 0; i < 256; ++i) {\n\t    j = (j + this.S[i] + key[i % key.length]) & 255;\n\t    t = this.S[i];\n\t    this.S[i] = this.S[j];\n\t    this.S[j] = t;\n\t  }\n\t  this.i = 0;\n\t  this.j = 0;\n\t}\n\t\n\tfunction ARC4next() {\n\t  var t;\n\t  this.i = (this.i + 1) & 255;\n\t  this.j = (this.j + this.S[this.i]) & 255;\n\t  t = this.S[this.i];\n\t  this.S[this.i] = this.S[this.j];\n\t  this.S[this.j] = t;\n\t  return this.S[(t + this.S[this.i]) & 255];\n\t}\n\t\n\tArcfour.prototype.init = ARC4init;\n\tArcfour.prototype.next = ARC4next;\n\t\n\t// Plug in your RNG constructor here\n\tfunction prng_newstate() {\n\t  return new Arcfour();\n\t}\n\t\n\t// Pool size must be a multiple of 4 and greater than 32.\n\t// An array of bytes the size of the pool will be passed to init()\n\tvar rng_psize = 256;\n\t\n\t\n\t// For best results, put code like\n\t// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n\t// in your main HTML document.\n\t\n\tvar rng_state;\n\tvar rng_pool;\n\tvar rng_pptr;\n\tvar window = {}\n\tvar navigator = {}\n\t// Mix in a 32-bit integer into the pool\n\tfunction rng_seed_int(x) {\n\t  rng_pool[rng_pptr++] ^= x & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n\t  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n\t}\n\t\n\t// Mix in the current time (w/milliseconds) into the pool\n\tfunction rng_seed_time() {\n\t  rng_seed_int(new Date().getTime());\n\t}\n\t\n\t// Initialize the pool with junk if needed.\n\tif(rng_pool == null) {\n\t  rng_pool = new Array();\n\t  rng_pptr = 0;\n\t  var t;\n\t  if(window && window.crypto && window.crypto.getRandomValues) {\n\t    // Use webcrypto if available\n\t    var ua = new Uint8Array(32);\n\t    window.crypto.getRandomValues(ua);\n\t    for(t = 0; t < 32; ++t)\n\t      rng_pool[rng_pptr++] = ua[t];\n\t  }\n\t  if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\" && window.crypto) {\n\t    // Extract entropy (256 bits) from NS4 RNG if available\n\t    var z = window.crypto.random(32);\n\t    for(t = 0; t < z.length; ++t)\n\t      rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n\t  }\n\t  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n\t    t = Math.floor(65536 * Math.random());\n\t    rng_pool[rng_pptr++] = t >>> 8;\n\t    rng_pool[rng_pptr++] = t & 255;\n\t  }\n\t  rng_pptr = 0;\n\t  rng_seed_time();\n\t  //rng_seed_int(window.screenX);\n\t  //rng_seed_int(window.screenY);\n\t}\n\t\n\tfunction rng_get_byte() {\n\t  if(rng_state == null) {\n\t    rng_seed_time();\n\t    rng_state = prng_newstate();\n\t    rng_state.init(rng_pool);\n\t    for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n\t      rng_pool[rng_pptr] = 0;\n\t    rng_pptr = 0;\n\t    //rng_pool = null;\n\t  }\n\t  // TODO: allow reseeding after first request\n\t  return rng_state.next();\n\t}\n\t\n\tfunction rng_get_bytes(ba) {\n\t  var i;\n\t  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n\t}\n\t\n\tfunction SecureRandom() {}\n\t\n\tSecureRandom.prototype.nextBytes = rng_get_bytes;\n\t\n\tmodule.exports = SecureRandom;\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// morfina-js.node.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e0594058cc89e222f0b6","import * as p from '../lib/paillier';\n\nexport const num = 3;\nconsole.log('paillier', p);\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","////////////////////////////////////////////////////////////////////////////////////\n//\n// paillier.js: a simple proof-of-concept Javascript implementation of the\n// Paillier homomorphic encryption system.\n//\n// Author: Maarten H. Everts (TNO)\n//\n// Dependencies: jsbn, from http://www-cs-students.stanford.edu/~tjw/jsbn/\n//  (you will need at least jsbn.js, jsbn2.js, prng4.js, and rng.js)\n// See the demo page on how to use it.\n//\n////////////////////////////////////////////////////////////////////////////////////\nvar BigInteger = require('jsbn').BigInteger;\n\nvar SecureRandom = require('./jsbn/rng');\n\nfunction lcm(a,b) {\n  return a.multiply(b).divide(a.gcd(b));\n}\n\npaillier = {\n\tpublicKey: function(bits, n) {\n\t\t// bits\n\t\tthis.bits = bits;\n\t\t// n\n\t\tthis.n = n;\n\t\t// n2 (cached n^2)\n\t\tthis.n2 = n.square();\n\t\t// np1 (cached n+1)\n\t\tthis.np1 = n.add(BigInteger.ONE);\n\t\tthis.rncache = new Array();\n\t},\n\tprivateKey: function(lambda, pubkey) {\n\t\t// lambda\n\t\tthis.lambda = lambda;\n\t\tthis.pubkey = pubkey;\n\t\t// x (cached) for decryption\n\t\tthis.x = pubkey.np1.modPow(this.lambda,pubkey.n2).subtract(BigInteger.ONE).divide(pubkey.n).modInverse(pubkey.n);\n\t},\n\tgenerateKeys: function(modulusbits) {\n\t\tvar p, q, n, keys = {}, rng = new SecureRandom();\n\t\tdo {\n\t\t\tdo {\n\t\t\t\tp = new BigInteger(modulusbits>>1,1,rng);\n\t\t\t} while (!p.isProbablePrime(10));\n\n\t\t\tdo {\n\t\t\t\tq = new BigInteger(modulusbits>>1,1,rng);\n\t\t\t} while(!q.isProbablePrime(10));\n\n\t\t\tn = p.multiply(q);\n\t\t} while(!(n.testBit(modulusbits - 1)) || (p.compareTo(q) == 0));\n\t\tkeys.pub = new paillier.publicKey(modulusbits,n);\n\t\tlambda = lcm(p.subtract(BigInteger.ONE),q.subtract(BigInteger.ONE));\n\t\tkeys.sec = new paillier.privateKey(lambda, keys.pub);\n\t\treturn keys;\n\t}\n}\n\n\npaillier.publicKey.prototype = {\n\tencrypt: function(m) {\n\t\treturn this.randomize(this.n.multiply(m).add(BigInteger.ONE).mod(this.n2));\n\t},\n\tadd: function(a,b) {\n\t\treturn a.multiply(b).remainder(this.n2);\n\t},\n\tmult: function(a,b) {\n\t\treturn a.modPow(b, this.n2);\n\t},\n\trandomize: function(a) {\n\t\tvar rn;\n\t\tif (this.rncache.length > 0) {\n\t\t\trn = this.rncache.pop();\n\t\t} else {\n\t\t\trn = this.getRN();\n\t\t}\n\t\treturn (a.multiply(rn)).mod(this.n2);\n\t},\n\tgetRN: function() {\n\t\tvar r, rng = new SecureRandom();\n\t\tdo {\n\t\t\tr = new BigInteger(this.bits,rng);\n\t\t\t// make sure r <= n\n\t\t} while(r.compareTo(this.n) >= 0);\n\t\treturn r.modPow(this.n, this.n2);\n\t},\n\t// Precompute values to make future invokations of encrypt and randomize (significantly) faster.\n\t// n is the number of precomputed values.\n\tprecompute: function(n) {\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\tthis.rncache.push(this.getRN());\n\t\t}\n\t}\n}\n\npaillier.privateKey.prototype = {\n\tdecrypt: function(c) {\n\t\treturn c.modPow(this.lambda,this.pubkey.n2).subtract(BigInteger.ONE).divide(this.pubkey.n).multiply(this.x).mod(this.pubkey.n);\n\t}\n}\n\nmodule.exports = paillier;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/paillier.js\n// module id = 1\n// module chunks = 0","module.exports = require(\"jsbn\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jsbn\"\n// module id = 2\n// module chunks = 0","// Random number generator - requires a PRNG backend, e.g. prng4.js\n\n\n// prng4.js - uses Arcfour as a PRNG\n\nfunction Arcfour() {\n  this.i = 0;\n  this.j = 0;\n  this.S = new Array();\n}\n\n// Initialize arcfour context from key, an array of ints, each from [0..255]\nfunction ARC4init(key) {\n  var i, j, t;\n  for(i = 0; i < 256; ++i)\n    this.S[i] = i;\n  j = 0;\n  for(i = 0; i < 256; ++i) {\n    j = (j + this.S[i] + key[i % key.length]) & 255;\n    t = this.S[i];\n    this.S[i] = this.S[j];\n    this.S[j] = t;\n  }\n  this.i = 0;\n  this.j = 0;\n}\n\nfunction ARC4next() {\n  var t;\n  this.i = (this.i + 1) & 255;\n  this.j = (this.j + this.S[this.i]) & 255;\n  t = this.S[this.i];\n  this.S[this.i] = this.S[this.j];\n  this.S[this.j] = t;\n  return this.S[(t + this.S[this.i]) & 255];\n}\n\nArcfour.prototype.init = ARC4init;\nArcfour.prototype.next = ARC4next;\n\n// Plug in your RNG constructor here\nfunction prng_newstate() {\n  return new Arcfour();\n}\n\n// Pool size must be a multiple of 4 and greater than 32.\n// An array of bytes the size of the pool will be passed to init()\nvar rng_psize = 256;\n\n\n// For best results, put code like\n// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n// in your main HTML document.\n\nvar rng_state;\nvar rng_pool;\nvar rng_pptr;\nvar window = {}\nvar navigator = {}\n// Mix in a 32-bit integer into the pool\nfunction rng_seed_int(x) {\n  rng_pool[rng_pptr++] ^= x & 255;\n  rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n  rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n  rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n}\n\n// Mix in the current time (w/milliseconds) into the pool\nfunction rng_seed_time() {\n  rng_seed_int(new Date().getTime());\n}\n\n// Initialize the pool with junk if needed.\nif(rng_pool == null) {\n  rng_pool = new Array();\n  rng_pptr = 0;\n  var t;\n  if(window && window.crypto && window.crypto.getRandomValues) {\n    // Use webcrypto if available\n    var ua = new Uint8Array(32);\n    window.crypto.getRandomValues(ua);\n    for(t = 0; t < 32; ++t)\n      rng_pool[rng_pptr++] = ua[t];\n  }\n  if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\" && window.crypto) {\n    // Extract entropy (256 bits) from NS4 RNG if available\n    var z = window.crypto.random(32);\n    for(t = 0; t < z.length; ++t)\n      rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n  }\n  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n    t = Math.floor(65536 * Math.random());\n    rng_pool[rng_pptr++] = t >>> 8;\n    rng_pool[rng_pptr++] = t & 255;\n  }\n  rng_pptr = 0;\n  rng_seed_time();\n  //rng_seed_int(window.screenX);\n  //rng_seed_int(window.screenY);\n}\n\nfunction rng_get_byte() {\n  if(rng_state == null) {\n    rng_seed_time();\n    rng_state = prng_newstate();\n    rng_state.init(rng_pool);\n    for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n      rng_pool[rng_pptr] = 0;\n    rng_pptr = 0;\n    //rng_pool = null;\n  }\n  // TODO: allow reseeding after first request\n  return rng_state.next();\n}\n\nfunction rng_get_bytes(ba) {\n  var i;\n  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n}\n\nfunction SecureRandom() {}\n\nSecureRandom.prototype.nextBytes = rng_get_bytes;\n\nmodule.exports = SecureRandom;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/jsbn/rng.js\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}