{"version":3,"sources":["webpack:///morfina-js.node.min.js","webpack:///webpack/bootstrap 069e0e63602761a65d80","webpack:///./lib/index.ts","webpack:///./lib/Client.ts","webpack:///./lib/paillier.js","webpack:///external \"jsbn\"","webpack:///./lib/rng.js","webpack:///./lib/Computer.ts","webpack:///./lib/Decryptor.ts","webpack:///external \"jsonpath\"","webpack:///external \"crypto-js\"","webpack:///./lib/ApiClient.ts","webpack:///external \"axios\"","webpack:///./lib/utils.ts"],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__export","hasOwnProperty","Object","defineProperty","value","paillier","jsbn_1","Computer_1","Decryptor_1","ApiClient_1","utils_1","MorfinaClient","config","credentials","_this","this","precompute","numberOfPrimes","Promise","resolve","computer","add","value1","value2","multiply","num","decryptValue","encryptionType","decryptor","apiClient","default","priv","PrivateKey","BigInteger","PAILLIER","publicKey","n","g","privateKey","lambda","preCalculatedDenominator","nSquared","pub","PublicKey","prototype","morph","payload","payloadWithApiKeys","encryptionParameters","map","x","webAPIKey","webApiKey","dataArray","encryptData","decryptData","data","getDecryptedValuesForPath","getClient","client","Error","getCryptoConfiguration","then","resp","isObjectEmpty","createCryptoConfiguration","undefined","createProxyMethod","name","apply","Array","slice","arguments","SecureRandom","rng","Paillier","valueOf","generate","bitLength","q","equals","p1","subtract","ONE","q1","nSq","l","divide","gcd","coprimeBitLength","Math","floor","random","alpha","beta","modPow","mod","modInverse","rncache","encrypt","i","r","rn","length","pop","getRandomNumber","f","addCrypt","push","rerandomize","decrypt","decryptR","a","e","require","Arcfour","j","S","ARC4init","key","t","ARC4next","prng_newstate","rng_seed_int","rng_pool","rng_pptr","rng_psize","rng_seed_time","Date","getTime","rng_get_byte","rng_state","init","next","rng_get_bytes","ba","window","navigator","crypto","getRandomValues","ua","Uint8Array","appName","appVersion","z","charCodeAt","nextBytes","Computer","getEncryptedBigIntegerFromValue","toString","val","bigInt","jp","crypto_js_1","Decryptor","decryptedValue","decryptVal","AES","enc","Base64","parse","mode","ECB","Utf8","addAsteriskToArrayInPath","path","replace","dataArrayCopy","JSON","stringify","forEach","jsonPath","dataCopy","decryptedValues","query","__extends","extendStatics","setPrototypeOf","__proto__","d","b","__","constructor","create","axios","ApiClient","post","baseUrl","headers","get","Client","_super","obj","keys"],"mappings":"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","file":"morfina-js.node.min.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t__export(__webpack_require__(1));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar paillier = __webpack_require__(2);\n\tvar jsbn_1 = __webpack_require__(3);\n\tvar Computer_1 = __webpack_require__(5);\n\tvar Decryptor_1 = __webpack_require__(6);\n\tvar ApiClient_1 = __webpack_require__(9);\n\tvar utils_1 = __webpack_require__(11);\n\t/**\n\t * MorfinaClient\n\t *\n\t * @class MorfinaClient\n\t */\n\tvar MorfinaClient = /** @class */ (function () {\n\t    /**\n\t     * Creates an instance of MorfinaClient.\n\t     * @param {Config} config\n\t     * @param {Credentials} credentials\n\t     *\n\t     * @memberof MorfinaClient\n\t     */\n\t    function MorfinaClient(config, credentials) {\n\t        var _this = this;\n\t        /**\n\t         * Precompute values to make future invokations of encrypt significantly faster.\n\t         * @param {number} numberOfPrimes\n\t         * @returns {Promise<void>}\n\t         *\n\t         * @memberof MorfinaClient\n\t         */\n\t        this.precompute = function (numberOfPrimes) {\n\t            return Promise.resolve(_this.computer.precompute(numberOfPrimes));\n\t        };\n\t        /**\n\t         * Returns sum of value1 and value2\n\t         * @param {string|number} value1\n\t         * @param {string|number} value2\n\t         * @returns {Promise<string>}\n\t         *\n\t         * @memberof MorfinaClient\n\t         */\n\t        this.add = function (value1, value2) {\n\t            return Promise.resolve(_this.computer.add(value1, value2));\n\t        };\n\t        /**\n\t         * Returns multiplication of value by num\n\t         * @param {string} value\n\t         * @param {number} num\n\t         * @returns {Promise<string>}\n\t         *\n\t         * @memberof MorfinaClient\n\t         */\n\t        this.multiply = function (value, num) {\n\t            return Promise.resolve(_this.computer.multiply(value, num));\n\t        };\n\t        /**\n\t         * @param {string} value\n\t         * @param {EncryptionType} encryptionType\n\t         * @returns {Promise<string>}\n\t         *\n\t         * @memberof Decryptor\n\t         */\n\t        this.decryptValue = function (value, encryptionType) {\n\t            return Promise.resolve(_this.decryptor.decryptValue(value, encryptionType));\n\t        };\n\t        this.config = config;\n\t        this.credentials = credentials;\n\t        this.apiClient = new ApiClient_1.default(config);\n\t        var priv = new paillier.PrivateKey(new jsbn_1.BigInteger(credentials.PAILLIER.publicKey.n), new jsbn_1.BigInteger(credentials.PAILLIER.publicKey.g), new jsbn_1.BigInteger(credentials.PAILLIER.privateKey.lambda), new jsbn_1.BigInteger(credentials.PAILLIER.privateKey.preCalculatedDenominator), new jsbn_1.BigInteger(credentials.PAILLIER.publicKey.nSquared));\n\t        var pub = new paillier.PublicKey(new jsbn_1.BigInteger(credentials.PAILLIER.publicKey.n), new jsbn_1.BigInteger(credentials.PAILLIER.publicKey.g), new jsbn_1.BigInteger(credentials.PAILLIER.publicKey.nSquared));\n\t        this.computer = new Computer_1.default(pub, priv);\n\t        this.decryptor = new Decryptor_1.default(this.credentials, pub, priv);\n\t    }\n\t    /**¨\n\t     * Calls Morfina server with payload where data are encrypted and sent back\n\t     * @param {EncryptPayloadWithoutApiKeys} payload\n\t     * @returns {Promise<AxiosResponse<any>>}\n\t     *\n\t     * @memberof MorfinaClient\n\t     */\n\t    MorfinaClient.prototype.morph = function (payload) {\n\t        var _this = this;\n\t        var payloadWithApiKeys = {\n\t            encryptionParameters: payload.encryptionParameters.map(function (x) {\n\t                x.webAPIKey = _this.config.webApiKey;\n\t                return x;\n\t            }),\n\t            dataArray: payload.dataArray,\n\t        };\n\t        return this.apiClient.encryptData(payloadWithApiKeys);\n\t    };\n\t    /**\n\t     * Returns decrypted data that is passed in encrypted\n\t     * @param {EncryptPayload} data\n\t     * @returns {Promise<any>}\n\t     *\n\t     * @memberof MorfinaClient\n\t     */\n\t    MorfinaClient.prototype.decryptData = function (data) {\n\t        return Promise.resolve(this.decryptor.decryptData(data));\n\t    };\n\t    /**\n\t     * @param {*} data\n\t     * @param {EncryptionParameter} encryptionParameters\n\t     * @returns {Promise<string[]>}\n\t     *\n\t     * @memberof Decryptor\n\t     */\n\t    MorfinaClient.prototype.getDecryptedValuesForPath = function (data, encryptionParameters) {\n\t        return Promise.resolve(this.decryptor.getDecryptedValuesForPath(data, encryptionParameters));\n\t    };\n\t    /**\n\t     * Calls Morfina API for crypto and returns \"instance\" of MorfinaClient with crypto\n\t     * @param {Config} config\n\t     * @returns {Promise<MorfinaClient>}\n\t     *\n\t     * @static\n\t     * @memberof MorfinaClient\n\t     */\n\t    MorfinaClient.getClient = function (config) {\n\t        var client = new ApiClient_1.default(config);\n\t        if (!config) {\n\t            throw Error('You have to pass credentials to MorfinaClient');\n\t        }\n\t        return client.getCryptoConfiguration()\n\t            .then(function (resp) {\n\t            if (!utils_1.isObjectEmpty(resp.data)) {\n\t                client = undefined;\n\t                return new MorfinaClient(config, resp.data);\n\t            }\n\t            return client.createCryptoConfiguration()\n\t                .then(function (resp) {\n\t                client = undefined;\n\t                return new MorfinaClient(config, resp.data);\n\t            });\n\t        });\n\t    };\n\t    return MorfinaClient;\n\t}());\n\texports.MorfinaClient = MorfinaClient;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/**\r\n\t * Implement the Paillier cryptosystem in JavaScript.\r\n\t */\r\n\t\r\n\t    var BigInteger = __webpack_require__(3).BigInteger;\r\n\t\r\n\t    var SecureRandom = __webpack_require__(4);\r\n\t\r\n\t    var rng = new SecureRandom();\r\n\t    var TWO = BigInteger.valueOf(2);\r\n\t\r\n\t    var Paillier = {\r\n\t        generate: function (bitLength) {\r\n\t            var p, q;\r\n\t            do {\r\n\t                p = new BigInteger(bitLength, 1, rng);\r\n\t                q = new BigInteger(bitLength, 1, rng);\r\n\t            } while (p.equals(q));\r\n\t\r\n\t            var n = p.multiply(q);\r\n\t\r\n\t            // p - 1\r\n\t            var p1 = p.subtract(BigInteger.ONE);\r\n\t            // q - 1\r\n\t            var q1 = q.subtract(BigInteger.ONE);\r\n\t\r\n\t            var nSq = n.multiply(n);\r\n\t\r\n\t            // lambda\r\n\t            var l = p1.multiply(q1).divide(p1.gcd(q1));\r\n\t\r\n\t            var coprimeBitLength = n.bitLength() - Math.floor(Math.random() * 10);\r\n\t\r\n\t            var alpha = new BigInteger(coprimeBitLength, 1, rng);\r\n\t            var beta = new BigInteger(coprimeBitLength, 1, rng);\r\n\t\r\n\t            var g = alpha.multiply(n).add(BigInteger.ONE)\r\n\t                .multiply(beta.modPow(n, nSq)).mod(nSq);\r\n\t\r\n\t            // mu\r\n\t            var m = g.modPow(l, nSq).mod(nSq)\r\n\t                .subtract(BigInteger.ONE).divide(n).modInverse(n);\r\n\t\r\n\t            return new Paillier.PrivateKey(n, g, l, m, nSq);\r\n\t        }\r\n\t    };\r\n\t\r\n\t    Paillier.PublicKey = function (n, g, nSq) {\r\n\t        this.n = n;\r\n\t        this.g = g;\r\n\t        this.nSq = nSq || n.multiply(n);\r\n\t        this.rncache = [];\r\n\t    };\r\n\t\r\n\t    Paillier.PublicKey.prototype.encrypt = function (i, r) {\r\n\t        if (!r) {\r\n\t            var rn;\r\n\t            if (this.rncache.length > 0) {\r\n\t                rn = this.rncache.pop();\r\n\t            } else {\r\n\t                rn = this.getRandomNumber();\r\n\t            }\r\n\t            r = rn;\r\n\t        }\r\n\t        return this.g.modPow(i, this.nSq).multiply(r.modPow(this.n, this.nSq))\r\n\t            .mod(this.nSq);\r\n\t    };\r\n\t\r\n\t    Paillier.PublicKey.prototype.add = function (c, f) {\r\n\t        return c.multiply(this.encrypt(f)).mod(this.nSq);\r\n\t    };\r\n\t\r\n\t    Paillier.PublicKey.prototype.addCrypt = function (c, f) {\r\n\t        return c.multiply(f).mod(this.nSq);\r\n\t    };\r\n\t\r\n\t    Paillier.PublicKey.prototype.multiply = function (c, f) {\r\n\t        return c.modPow(f, this.nSq);\r\n\t    };\r\n\t\r\n\t    Paillier.PublicKey.prototype.precompute = function(n) {\r\n\t        for (var i = 0; i < n; i++) {\r\n\t\t\t\tthis.rncache.push(this.getRandomNumber());\r\n\t\t\t}\r\n\t    }\r\n\t\r\n\t    Paillier.PublicKey.prototype.getRandomNumber = function() {\r\n\t        var coprimeBitLength = this.n.bitLength() - Math.floor(Math.random() * 10);\r\n\t        return new BigInteger(coprimeBitLength, 1, rng);\r\n\t    };\r\n\t\r\n\t    Paillier.PublicKey.prototype.rerandomize = function (c, r) {\r\n\t        if (!r) {\r\n\t            var rn;\r\n\t            if (this.rncache.length > 0) {\r\n\t                rn = this.rncache.pop();\r\n\t            } else {\r\n\t                rn = this.getRandomNumber();\r\n\t            }\r\n\t            r = rn;\r\n\t        }\r\n\t        return c.multiply(r.modPow(this.n, this.nSq)).mod(this.nSq);\r\n\t    };\r\n\t\r\n\t    Paillier.PrivateKey = function (n, g, l, m, nSq) {\r\n\t        this.l = l;\r\n\t        this.m = m;\r\n\t        this.n = n;\r\n\t        this.nSq = nSq || n.multiply(n);\r\n\t        this.pub = new Paillier.PublicKey(n, g, this.nSq);\r\n\t    };\r\n\t\r\n\t    Paillier.PrivateKey.prototype.decrypt = function (c) {\r\n\t        return c.modPow(this.l, this.nSq).subtract(BigInteger.ONE)\r\n\t            .divide(this.n).multiply(this.m).mod(this.n);\r\n\t    };\r\n\t\r\n\t    Paillier.PrivateKey.prototype.decryptR = function (c, i) {\r\n\t        if (!i) {\r\n\t            i = this.decrypt(c);\r\n\t        }\r\n\t        var rn = c.multiply(this.pub.g.modPow(i, this.nSq).modInverse(this.nSq))\r\n\t            .mod(this.nSq);\r\n\t        var a = this.l.modInverse(this.n).multiply(this.n.subtract(BigInteger.ONE));\r\n\t        var e = a.multiply(this.l).add(BigInteger.ONE).divide(this.n);\r\n\t        return rn.modPow(e, this.n);\r\n\t    };\r\n\t\r\n\t    function createProxyMethod(name) {\r\n\t        return function () {\r\n\t            return this.pub[name].apply(this.pub,\r\n\t                Array.prototype.slice.apply(arguments));\r\n\t        };\r\n\t    }\r\n\t\r\n\t    var a = [\"add\", \"addCrypt\", \"multiply\", \"rerandomize\", \"encrypt\"];\r\n\t    for (var i = 0, l = a.length; i < l; i++) {\r\n\t        Paillier.PrivateKey.prototype[a[i]] = createProxyMethod(a[i]);\r\n\t    }\r\n\t\r\n\t    module.exports = Paillier;\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"jsbn\");\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n\t// Random number generator - requires a PRNG backend, e.g. prng4.js\n\t\n\t\n\t// prng4.js - uses Arcfour as a PRNG\n\t\n\tfunction Arcfour() {\n\t  this.i = 0;\n\t  this.j = 0;\n\t  this.S = new Array();\n\t}\n\t\n\t// Initialize arcfour context from key, an array of ints, each from [0..255]\n\tfunction ARC4init(key) {\n\t  var i, j, t;\n\t  for(i = 0; i < 256; ++i)\n\t    this.S[i] = i;\n\t  j = 0;\n\t  for(i = 0; i < 256; ++i) {\n\t    j = (j + this.S[i] + key[i % key.length]) & 255;\n\t    t = this.S[i];\n\t    this.S[i] = this.S[j];\n\t    this.S[j] = t;\n\t  }\n\t  this.i = 0;\n\t  this.j = 0;\n\t}\n\t\n\tfunction ARC4next() {\n\t  var t;\n\t  this.i = (this.i + 1) & 255;\n\t  this.j = (this.j + this.S[this.i]) & 255;\n\t  t = this.S[this.i];\n\t  this.S[this.i] = this.S[this.j];\n\t  this.S[this.j] = t;\n\t  return this.S[(t + this.S[this.i]) & 255];\n\t}\n\t\n\tArcfour.prototype.init = ARC4init;\n\tArcfour.prototype.next = ARC4next;\n\t\n\t// Plug in your RNG constructor here\n\tfunction prng_newstate() {\n\t  return new Arcfour();\n\t}\n\t\n\t// Pool size must be a multiple of 4 and greater than 32.\n\t// An array of bytes the size of the pool will be passed to init()\n\tvar rng_psize = 256;\n\t\n\t\n\t// For best results, put code like\n\t// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n\t// in your main HTML document.\n\t\n\tvar rng_state;\n\tvar rng_pool;\n\tvar rng_pptr;\n\tvar window = {}\n\tvar navigator = {}\n\t// Mix in a 32-bit integer into the pool\n\tfunction rng_seed_int(x) {\n\t  rng_pool[rng_pptr++] ^= x & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n\t  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n\t}\n\t\n\t// Mix in the current time (w/milliseconds) into the pool\n\tfunction rng_seed_time() {\n\t  rng_seed_int(new Date().getTime());\n\t}\n\t\n\t// Initialize the pool with junk if needed.\n\tif(rng_pool == null) {\n\t  rng_pool = new Array();\n\t  rng_pptr = 0;\n\t  var t;\n\t  if(window && window.crypto && window.crypto.getRandomValues) {\n\t    // Use webcrypto if available\n\t    var ua = new Uint8Array(32);\n\t    window.crypto.getRandomValues(ua);\n\t    for(t = 0; t < 32; ++t)\n\t      rng_pool[rng_pptr++] = ua[t];\n\t  }\n\t  if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\" && window.crypto) {\n\t    // Extract entropy (256 bits) from NS4 RNG if available\n\t    var z = window.crypto.random(32);\n\t    for(t = 0; t < z.length; ++t)\n\t      rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n\t  }\n\t  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n\t    t = Math.floor(65536 * Math.random());\n\t    rng_pool[rng_pptr++] = t >>> 8;\n\t    rng_pool[rng_pptr++] = t & 255;\n\t  }\n\t  rng_pptr = 0;\n\t  rng_seed_time();\n\t  //rng_seed_int(window.screenX);\n\t  //rng_seed_int(window.screenY);\n\t}\n\t\n\tfunction rng_get_byte() {\n\t  if(rng_state == null) {\n\t    rng_seed_time();\n\t    rng_state = prng_newstate();\n\t    rng_state.init(rng_pool);\n\t    for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n\t      rng_pool[rng_pptr] = 0;\n\t    rng_pptr = 0;\n\t    //rng_pool = null;\n\t  }\n\t  // TODO: allow reseeding after first request\n\t  return rng_state.next();\n\t}\n\t\n\tfunction rng_get_bytes(ba) {\n\t  var i;\n\t  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n\t}\n\t\n\tfunction SecureRandom() {}\n\t\n\tSecureRandom.prototype.nextBytes = rng_get_bytes;\n\t\n\tmodule.exports = SecureRandom;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar jsbn_1 = __webpack_require__(3);\n\t/**\n\t *\n\t *\n\t * @class Computer\n\t */\n\tvar Computer = /** @class */ (function () {\n\t    /**\n\t     * Creates an instance of Computer.\n\t     * @param {Credentials} credentials\n\t     * @memberof Computer\n\t     */\n\t    function Computer(publicKey, privateKey) {\n\t        var _this = this;\n\t        /**\n\t         * Precompute values to make future invokations of encrypt significantly faster.\n\t         * @param {number} numberOfPrimes\n\t         * @returns {void}\n\t         *\n\t         * @memberof Computer\n\t         */\n\t        this.precompute = function (numberOfPrimes) {\n\t            return _this.publicKey.precompute(numberOfPrimes);\n\t        };\n\t        /**\n\t         * Returns sum of value1 and value2\n\t         * @param {string|number} value1\n\t         * @param {string|number} value2\n\t         * @returns {string}\n\t         *\n\t         * @memberof Computer\n\t         */\n\t        this.add = function (value1, value2) {\n\t            return _this.publicKey.addCrypt(_this.getEncryptedBigIntegerFromValue(value1), _this.getEncryptedBigIntegerFromValue(value2)).toString();\n\t        };\n\t        /**\n\t         * Returns multiplication of value by num\n\t         * @param {string|number} value\n\t         * @param {number} num\n\t         * @returns {string}\n\t         *\n\t         * @memberof Computer\n\t         */\n\t        this.multiply = function (value, num) {\n\t            return _this.publicKey.multiply(_this.getEncryptedBigIntegerFromValue(value), new jsbn_1.BigInteger(num.toString(), 10)).toString();\n\t        };\n\t        /**\n\t         * If passed in value is string then it assumes that passed in value is encrypted so it creates BigInteger.\n\t         * If passed in values is number then in returns decrypted BigInteger.\n\t         * @param {string | number} val\n\t         * @returns {BigInteger}\n\t         *\n\t         * @private\n\t         * @memberof Computer\n\t         */\n\t        this.getEncryptedBigIntegerFromValue = function (val) {\n\t            if (typeof val === 'string') {\n\t                return new jsbn_1.BigInteger(val, 10);\n\t            }\n\t            if (typeof val === 'number') {\n\t                var bigInt = new jsbn_1.BigInteger(val.toString(), 10);\n\t                return _this.publicKey.encrypt(bigInt);\n\t            }\n\t            throw Error('Input must be number or string');\n\t        };\n\t        this.publicKey = publicKey;\n\t        this.privateKey = privateKey;\n\t    }\n\t    return Computer;\n\t}());\n\texports.default = Computer;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar jp = __webpack_require__(7);\n\tvar crypto_js_1 = __webpack_require__(8);\n\tvar jsbn_1 = __webpack_require__(3);\n\t/**\n\t *\n\t *\n\t * @class Decryptor\n\t */\n\tvar Decryptor = /** @class */ (function () {\n\t    /**\n\t     * Creates an instance of Decryptor.\n\t     * @param {Credentials} credentials\n\t     * @param {*} publicKey\n\t     * @param {*} privateKey\n\t     * @memberof Decryptor\n\t     */\n\t    function Decryptor(credentials, publicKey, privateKey) {\n\t        var _this = this;\n\t        /**\n\t         * @param {string} value\n\t         * @param {EncryptionType} encryptionType\n\t         * @returns {string}\n\t         *\n\t         * @memberof Decryptor\n\t         */\n\t        this.decryptValue = function (value, encryptionType) {\n\t            var decryptedValue = _this.decryptVal(value, encryptionType);\n\t            return decryptedValue;\n\t        };\n\t        /**\n\t         * @param {any} val\n\t         * @param {string} encryptionType\n\t         * @returns {string}\n\t         *\n\t         * @private\n\t         * @memberof Decryptor\n\t         */\n\t        this.decryptVal = function (val, encryptionType) {\n\t            switch (encryptionType) {\n\t                case 'AES':\n\t                    return crypto_js_1.AES.decrypt(val, crypto_js_1.enc.Base64.parse(_this.credentials.AES.key), { mode: crypto_js_1.mode.ECB }).toString(crypto_js_1.enc.Utf8);\n\t                case 'PAILLIER':\n\t                    return _this.privateKey.decrypt(new jsbn_1.BigInteger(val.toString())).toString(10);\n\t                default:\n\t                    return val;\n\t            }\n\t        };\n\t        /**\n\t         * @param {string} path\n\t         * @returns {string}\n\t         *\n\t         * @private\n\t         * @memberof Decryptor\n\t         */\n\t        this.addAsteriskToArrayInPath = function (path) { return path.replace('[]', '[*]'); };\n\t        this.credentials = credentials;\n\t        this.publicKey = publicKey;\n\t        this.privateKey = privateKey;\n\t    }\n\t    /**\n\t     * @param {EncryptPayload} data\n\t     * @returns {T}\n\t     *\n\t     * @memberof Decryptor\n\t     */\n\t    Decryptor.prototype.decryptData = function (data) {\n\t        var _this = this;\n\t        var dataArrayCopy = JSON.parse(JSON.stringify(data.dataArray));\n\t        data.encryptionParameters.forEach(function (x) {\n\t            jp.apply(dataArrayCopy, _this.addAsteriskToArrayInPath(x.jsonPath), function (val) {\n\t                return _this.decryptVal(val, x.encryptionType);\n\t            });\n\t        });\n\t        return dataArrayCopy;\n\t    };\n\t    /**\n\t     * @param {*} data\n\t     * @param {EncryptionParameter} encryptionParameters\n\t     * @returns {string[]}\n\t     *\n\t     * @memberof Decryptor\n\t     */\n\t    Decryptor.prototype.getDecryptedValuesForPath = function (data, encryptionParameters) {\n\t        var _this = this;\n\t        if (!encryptionParameters) {\n\t            throw Error('You have to provide encryptionParameters as second argument');\n\t        }\n\t        var dataCopy = JSON.parse(JSON.stringify(data));\n\t        var decryptedValues = jp.query(dataCopy, this.addAsteriskToArrayInPath(encryptionParameters.jsonPath))\n\t            .map(function (x) { return _this.decryptVal(x, encryptionParameters.encryptionType); });\n\t        return decryptedValues;\n\t    };\n\t    return Decryptor;\n\t}());\n\texports.default = Decryptor;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"jsonpath\");\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"crypto-js\");\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar axios = __webpack_require__(10);\n\t/**\n\t *\n\t * @class ApiClient\n\t */\n\tvar ApiClient = /** @class */ (function () {\n\t    /**\n\t     * Creates an instance of ApiClient.\n\t     * @param {any} config\n\t     * @memberof ApiClient\n\t     */\n\t    function ApiClient(config) {\n\t        var _this = this;\n\t        /**\n\t         * Create crypto configuration\n\t         * @returns {Promise<AxiosResponse<Credentials>>}\n\t         *\n\t         * @memberof ApiClient\n\t         */\n\t        this.createCryptoConfiguration = function () {\n\t            return axios.post(_this.config.baseUrl + \"/morfina/api/v1/configuration/\" + _this.config.webApiKey + \"/create\", null, { headers: ApiClient.headers });\n\t        };\n\t        /**\n\t         * Get crypto configuration\n\t         * @returns {Promise<AxiosResponse<Credentials>>}\n\t         *\n\t         * @memberof ApiClient\n\t         */\n\t        this.getCryptoConfiguration = function () {\n\t            return axios.get(_this.config.baseUrl + \"/morfina/api/v1/configuration/\" + _this.config.webApiKey, { headers: ApiClient.headers });\n\t        };\n\t        this.config = config;\n\t    }\n\t    /**\n\t     * Encrypt data\n\t     * @param {EncryptPayload} payload\n\t     * @returns {Promise<AxiosResponse<EncryptPayload>>}\n\t     *\n\t     * @memberof ApiClient\n\t     */\n\t    ApiClient.prototype.encryptData = function (payload) {\n\t        return axios.post(this.config.baseUrl + \"/morfina/api/v1/encrypt\", payload, { headers: ApiClient.headers });\n\t    };\n\t    ApiClient.headers = {};\n\t    return ApiClient;\n\t}());\n\texports.ApiClient = ApiClient;\n\tvar Client = /** @class */ (function (_super) {\n\t    __extends(Client, _super);\n\t    function Client(config) {\n\t        return _super.call(this, config) || this;\n\t    }\n\t    return Client;\n\t}(ApiClient));\n\texports.default = Client;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"axios\");\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar isObjectEmpty = function (obj) { return Object.keys(obj).length === 0 && obj.constructor === Object; };\n\texports.isObjectEmpty = isObjectEmpty;\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// morfina-js.node.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 069e0e63602761a65d80","export * from './Client';\n\n\n// WEBPACK FOOTER //\n// ./lib/index.ts","import * as axios from 'axios';\nimport * as paillier from './paillier';\nimport { BigInteger } from 'jsbn';\nimport {\n  Config,\n  Credentials,\n  AxiosResponse,\n  EncryptPayload,\n  EncryptPayloadWithoutApiKeys,\n  EncryptionParameterWithApiKey,\n  EncryptionParameter,\n  EncryptionType,\n} from './model';\nimport Computer from './Computer';\nimport Decryptor from './Decryptor';\nimport ApiClient from './ApiClient';\nimport { isObjectEmpty } from './utils';\n\n/**\n * MorfinaClient\n *\n * @class MorfinaClient\n */\nexport class MorfinaClient {\n  config: Config;\n  computer: Computer;\n  decryptor: Decryptor;\n  credentials: Credentials;\n  apiClient: ApiClient;\n\n  /**\n   * Creates an instance of MorfinaClient.\n   * @param {Config} config\n   * @param {Credentials} credentials\n   *\n   * @memberof MorfinaClient\n   */\n  constructor(config: Config, credentials: Credentials) {\n    this.config = config;\n    this.credentials = credentials;\n    this.apiClient = new ApiClient(config);\n\n    const priv = new paillier.PrivateKey(\n      new BigInteger(credentials.PAILLIER.publicKey.n),\n      new BigInteger(credentials.PAILLIER.publicKey.g),\n      new BigInteger(credentials.PAILLIER.privateKey.lambda),\n      new BigInteger(credentials.PAILLIER.privateKey.preCalculatedDenominator),\n      new BigInteger(credentials.PAILLIER.publicKey.nSquared)\n    );\n\n    const pub = new paillier.PublicKey(\n      new BigInteger(credentials.PAILLIER.publicKey.n),\n      new BigInteger(credentials.PAILLIER.publicKey.g),\n      new BigInteger(credentials.PAILLIER.publicKey.nSquared)\n    );\n\n\n    this.computer = new Computer(pub, priv);\n    this.decryptor = new Decryptor(this.credentials, pub, priv);\n  }\n\n  /**\n   * Calls Morfina API for crypto and returns \"instance\" of MorfinaClient with crypto\n   * @param {Config} config\n   * @returns {Promise<MorfinaClient>}\n   *\n   * @static\n   * @memberof MorfinaClient\n   */\n  static getClient = (config: Config): Promise<MorfinaClient> => {\n    let client = new ApiClient(config);\n\n    if (!config) {\n      throw Error('You have to pass credentials to MorfinaClient');\n    }\n\n    return client.getCryptoConfiguration()\n      .then((resp) => {\n        if(!isObjectEmpty(resp.data)) {\n          client = undefined;\n          return new MorfinaClient(config, resp.data) as any;\n        }\n\n        return client.createCryptoConfiguration()\n          .then(resp => {\n            client = undefined;\n            return new MorfinaClient(config, resp.data);\n          });\n      });\n  }\n\n  /**¨\n   * Calls Morfina server with payload where data are encrypted and sent back\n   * @param {EncryptPayloadWithoutApiKeys} payload\n   * @returns {Promise<AxiosResponse<any>>}\n   *\n   * @memberof MorfinaClient\n   */\n  morph<T = any>(payload: EncryptPayloadWithoutApiKeys<T>): Promise<AxiosResponse<EncryptPayload<T>>> {\n    const payloadWithApiKeys = {\n      encryptionParameters: payload.encryptionParameters.map((x: EncryptionParameterWithApiKey) => {\n        x.webAPIKey = this.config.webApiKey;\n        return x;\n      }),\n      dataArray: payload.dataArray,\n    };\n\n    return this.apiClient.encryptData<T>(payloadWithApiKeys);\n  }\n\n  /**\n   * Precompute values to make future invokations of encrypt significantly faster.\n   * @param {number} numberOfPrimes\n   * @returns {Promise<void>}\n   *\n   * @memberof MorfinaClient\n   */\n  precompute = (numberOfPrimes: number): Promise<void> => {\n    return Promise.resolve(this.computer.precompute(numberOfPrimes));\n  }\n\n  /**\n   * Returns sum of value1 and value2\n   * @param {string|number} value1\n   * @param {string|number} value2\n   * @returns {Promise<string>}\n   *\n   * @memberof MorfinaClient\n   */\n  add = (value1: string | number, value2: string | number): Promise<string> => {\n    return Promise.resolve(this.computer.add(value1, value2));\n  }\n\n  /**\n   * Returns multiplication of value by num\n   * @param {string} value\n   * @param {number} num\n   * @returns {Promise<string>}\n   *\n   * @memberof MorfinaClient\n   */\n  multiply = (value: string | number, num: number): Promise<string> => {\n    return Promise.resolve(this.computer.multiply(value, num));\n  }\n\n  /**\n   * Returns decrypted data that is passed in encrypted\n   * @param {EncryptPayload} data\n   * @returns {Promise<any>}\n   *\n   * @memberof MorfinaClient\n   */\n  decryptData<T = any>(data: EncryptPayload<T>): Promise<T> {\n    return Promise.resolve(this.decryptor.decryptData(data));\n  }\n\n  /**\n   * @param {string} value\n   * @param {EncryptionType} encryptionType\n   * @returns {Promise<string>}\n   *\n   * @memberof Decryptor\n   */\n  decryptValue = (value: string, encryptionType: EncryptionType): Promise<string> => {\n    return Promise.resolve(this.decryptor.decryptValue(value, encryptionType));\n  }\n\n  /**\n   * @param {*} data\n   * @param {EncryptionParameter} encryptionParameters\n   * @returns {Promise<string[]>}\n   *\n   * @memberof Decryptor\n   */\n  getDecryptedValuesForPath<T = any>(data: T, encryptionParameters: EncryptionParameter): Promise<string[]> {\n    return Promise.resolve(this.decryptor.getDecryptedValuesForPath(data, encryptionParameters));\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/Client.ts","/**\r\n * Implement the Paillier cryptosystem in JavaScript.\r\n */\r\n\r\n    var BigInteger = require('jsbn').BigInteger;\r\n\r\n    var SecureRandom = require('./rng');\r\n\r\n    var rng = new SecureRandom();\r\n    var TWO = BigInteger.valueOf(2);\r\n\r\n    var Paillier = {\r\n        generate: function (bitLength) {\r\n            var p, q;\r\n            do {\r\n                p = new BigInteger(bitLength, 1, rng);\r\n                q = new BigInteger(bitLength, 1, rng);\r\n            } while (p.equals(q));\r\n\r\n            var n = p.multiply(q);\r\n\r\n            // p - 1\r\n            var p1 = p.subtract(BigInteger.ONE);\r\n            // q - 1\r\n            var q1 = q.subtract(BigInteger.ONE);\r\n\r\n            var nSq = n.multiply(n);\r\n\r\n            // lambda\r\n            var l = p1.multiply(q1).divide(p1.gcd(q1));\r\n\r\n            var coprimeBitLength = n.bitLength() - Math.floor(Math.random() * 10);\r\n\r\n            var alpha = new BigInteger(coprimeBitLength, 1, rng);\r\n            var beta = new BigInteger(coprimeBitLength, 1, rng);\r\n\r\n            var g = alpha.multiply(n).add(BigInteger.ONE)\r\n                .multiply(beta.modPow(n, nSq)).mod(nSq);\r\n\r\n            // mu\r\n            var m = g.modPow(l, nSq).mod(nSq)\r\n                .subtract(BigInteger.ONE).divide(n).modInverse(n);\r\n\r\n            return new Paillier.PrivateKey(n, g, l, m, nSq);\r\n        }\r\n    };\r\n\r\n    Paillier.PublicKey = function (n, g, nSq) {\r\n        this.n = n;\r\n        this.g = g;\r\n        this.nSq = nSq || n.multiply(n);\r\n        this.rncache = [];\r\n    };\r\n\r\n    Paillier.PublicKey.prototype.encrypt = function (i, r) {\r\n        if (!r) {\r\n            var rn;\r\n            if (this.rncache.length > 0) {\r\n                rn = this.rncache.pop();\r\n            } else {\r\n                rn = this.getRandomNumber();\r\n            }\r\n            r = rn;\r\n        }\r\n        return this.g.modPow(i, this.nSq).multiply(r.modPow(this.n, this.nSq))\r\n            .mod(this.nSq);\r\n    };\r\n\r\n    Paillier.PublicKey.prototype.add = function (c, f) {\r\n        return c.multiply(this.encrypt(f)).mod(this.nSq);\r\n    };\r\n\r\n    Paillier.PublicKey.prototype.addCrypt = function (c, f) {\r\n        return c.multiply(f).mod(this.nSq);\r\n    };\r\n\r\n    Paillier.PublicKey.prototype.multiply = function (c, f) {\r\n        return c.modPow(f, this.nSq);\r\n    };\r\n\r\n    Paillier.PublicKey.prototype.precompute = function(n) {\r\n        for (var i = 0; i < n; i++) {\r\n\t\t\tthis.rncache.push(this.getRandomNumber());\r\n\t\t}\r\n    }\r\n\r\n    Paillier.PublicKey.prototype.getRandomNumber = function() {\r\n        var coprimeBitLength = this.n.bitLength() - Math.floor(Math.random() * 10);\r\n        return new BigInteger(coprimeBitLength, 1, rng);\r\n    };\r\n\r\n    Paillier.PublicKey.prototype.rerandomize = function (c, r) {\r\n        if (!r) {\r\n            var rn;\r\n            if (this.rncache.length > 0) {\r\n                rn = this.rncache.pop();\r\n            } else {\r\n                rn = this.getRandomNumber();\r\n            }\r\n            r = rn;\r\n        }\r\n        return c.multiply(r.modPow(this.n, this.nSq)).mod(this.nSq);\r\n    };\r\n\r\n    Paillier.PrivateKey = function (n, g, l, m, nSq) {\r\n        this.l = l;\r\n        this.m = m;\r\n        this.n = n;\r\n        this.nSq = nSq || n.multiply(n);\r\n        this.pub = new Paillier.PublicKey(n, g, this.nSq);\r\n    };\r\n\r\n    Paillier.PrivateKey.prototype.decrypt = function (c) {\r\n        return c.modPow(this.l, this.nSq).subtract(BigInteger.ONE)\r\n            .divide(this.n).multiply(this.m).mod(this.n);\r\n    };\r\n\r\n    Paillier.PrivateKey.prototype.decryptR = function (c, i) {\r\n        if (!i) {\r\n            i = this.decrypt(c);\r\n        }\r\n        var rn = c.multiply(this.pub.g.modPow(i, this.nSq).modInverse(this.nSq))\r\n            .mod(this.nSq);\r\n        var a = this.l.modInverse(this.n).multiply(this.n.subtract(BigInteger.ONE));\r\n        var e = a.multiply(this.l).add(BigInteger.ONE).divide(this.n);\r\n        return rn.modPow(e, this.n);\r\n    };\r\n\r\n    function createProxyMethod(name) {\r\n        return function () {\r\n            return this.pub[name].apply(this.pub,\r\n                Array.prototype.slice.apply(arguments));\r\n        };\r\n    }\r\n\r\n    var a = [\"add\", \"addCrypt\", \"multiply\", \"rerandomize\", \"encrypt\"];\r\n    for (var i = 0, l = a.length; i < l; i++) {\r\n        Paillier.PrivateKey.prototype[a[i]] = createProxyMethod(a[i]);\r\n    }\r\n\r\n    module.exports = Paillier;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/paillier.js\n// module id = 2\n// module chunks = 0","module.exports = require(\"jsbn\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jsbn\"\n// module id = 3\n// module chunks = 0","// Random number generator - requires a PRNG backend, e.g. prng4.js\n\n\n// prng4.js - uses Arcfour as a PRNG\n\nfunction Arcfour() {\n  this.i = 0;\n  this.j = 0;\n  this.S = new Array();\n}\n\n// Initialize arcfour context from key, an array of ints, each from [0..255]\nfunction ARC4init(key) {\n  var i, j, t;\n  for(i = 0; i < 256; ++i)\n    this.S[i] = i;\n  j = 0;\n  for(i = 0; i < 256; ++i) {\n    j = (j + this.S[i] + key[i % key.length]) & 255;\n    t = this.S[i];\n    this.S[i] = this.S[j];\n    this.S[j] = t;\n  }\n  this.i = 0;\n  this.j = 0;\n}\n\nfunction ARC4next() {\n  var t;\n  this.i = (this.i + 1) & 255;\n  this.j = (this.j + this.S[this.i]) & 255;\n  t = this.S[this.i];\n  this.S[this.i] = this.S[this.j];\n  this.S[this.j] = t;\n  return this.S[(t + this.S[this.i]) & 255];\n}\n\nArcfour.prototype.init = ARC4init;\nArcfour.prototype.next = ARC4next;\n\n// Plug in your RNG constructor here\nfunction prng_newstate() {\n  return new Arcfour();\n}\n\n// Pool size must be a multiple of 4 and greater than 32.\n// An array of bytes the size of the pool will be passed to init()\nvar rng_psize = 256;\n\n\n// For best results, put code like\n// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n// in your main HTML document.\n\nvar rng_state;\nvar rng_pool;\nvar rng_pptr;\nvar window = {}\nvar navigator = {}\n// Mix in a 32-bit integer into the pool\nfunction rng_seed_int(x) {\n  rng_pool[rng_pptr++] ^= x & 255;\n  rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n  rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n  rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n}\n\n// Mix in the current time (w/milliseconds) into the pool\nfunction rng_seed_time() {\n  rng_seed_int(new Date().getTime());\n}\n\n// Initialize the pool with junk if needed.\nif(rng_pool == null) {\n  rng_pool = new Array();\n  rng_pptr = 0;\n  var t;\n  if(window && window.crypto && window.crypto.getRandomValues) {\n    // Use webcrypto if available\n    var ua = new Uint8Array(32);\n    window.crypto.getRandomValues(ua);\n    for(t = 0; t < 32; ++t)\n      rng_pool[rng_pptr++] = ua[t];\n  }\n  if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\" && window.crypto) {\n    // Extract entropy (256 bits) from NS4 RNG if available\n    var z = window.crypto.random(32);\n    for(t = 0; t < z.length; ++t)\n      rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n  }\n  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n    t = Math.floor(65536 * Math.random());\n    rng_pool[rng_pptr++] = t >>> 8;\n    rng_pool[rng_pptr++] = t & 255;\n  }\n  rng_pptr = 0;\n  rng_seed_time();\n  //rng_seed_int(window.screenX);\n  //rng_seed_int(window.screenY);\n}\n\nfunction rng_get_byte() {\n  if(rng_state == null) {\n    rng_seed_time();\n    rng_state = prng_newstate();\n    rng_state.init(rng_pool);\n    for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n      rng_pool[rng_pptr] = 0;\n    rng_pptr = 0;\n    //rng_pool = null;\n  }\n  // TODO: allow reseeding after first request\n  return rng_state.next();\n}\n\nfunction rng_get_bytes(ba) {\n  var i;\n  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n}\n\nfunction SecureRandom() {}\n\nSecureRandom.prototype.nextBytes = rng_get_bytes;\n\nmodule.exports = SecureRandom;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/rng.js\n// module id = 4\n// module chunks = 0","import * as paillier from './paillier';\nimport { BigInteger } from 'jsbn';\nimport { Credentials } from './model';\n\n/**\n *\n *\n * @class Computer\n */\nclass Computer {\n  private publicKey: any;\n  private privateKey: any;\n\n  /**\n   * Creates an instance of Computer.\n   * @param {Credentials} credentials\n   * @memberof Computer\n   */\n  constructor(publicKey, privateKey) {\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n  }\n\n  /**\n   * Precompute values to make future invokations of encrypt significantly faster.\n   * @param {number} numberOfPrimes\n   * @returns {void}\n   *\n   * @memberof Computer\n   */\n  precompute = (numberOfPrimes: number): void => {\n    return this.publicKey.precompute(numberOfPrimes);\n  }\n\n  /**\n   * Returns sum of value1 and value2\n   * @param {string|number} value1\n   * @param {string|number} value2\n   * @returns {string}\n   *\n   * @memberof Computer\n   */\n  add = (value1: string | number, value2: string | number): string => {\n    return this.publicKey.addCrypt(\n      this.getEncryptedBigIntegerFromValue(value1),\n      this.getEncryptedBigIntegerFromValue(value2)\n    ).toString();\n  }\n\n  /**\n   * Returns multiplication of value by num\n   * @param {string|number} value\n   * @param {number} num\n   * @returns {string}\n   *\n   * @memberof Computer\n   */\n  multiply = (value: string | number, num: number): string => {\n    return this.publicKey.multiply(\n      this.getEncryptedBigIntegerFromValue(value),\n      new BigInteger(num.toString(), 10)\n    ).toString();\n  }\n\n  /**\n   * If passed in value is string then it assumes that passed in value is encrypted so it creates BigInteger.\n   * If passed in values is number then in returns decrypted BigInteger.\n   * @param {string | number} val\n   * @returns {BigInteger}\n   *\n   * @private\n   * @memberof Computer\n   */\n  private getEncryptedBigIntegerFromValue = (val: string | number): string => {\n    if (typeof val === 'string') {\n      return new BigInteger(val, 10);\n    }\n\n    if (typeof val === 'number') {\n      const bigInt = new BigInteger(val.toString(), 10);\n      return this.publicKey.encrypt(bigInt);\n    }\n\n    throw Error('Input must be number or string');\n  }\n}\n\nexport default Computer;\n\n\n// WEBPACK FOOTER //\n// ./lib/Computer.ts","import * as jp from 'jsonpath';\nimport { AES, enc, mode, pad } from 'crypto-js';\nimport { BigInteger } from 'jsbn';\nimport { Credentials, EncryptPayload, EncryptionParameter, EncryptionType } from './model';\n\n/**\n * \n * \n * @class Decryptor\n */\nclass Decryptor {\n  private credentials: Credentials;\n  private publicKey: any;\n  private privateKey: any;\n\n  /**\n   * Creates an instance of Decryptor.\n   * @param {Credentials} credentials \n   * @param {*} publicKey \n   * @param {*} privateKey \n   * @memberof Decryptor\n   */\n  constructor(credentials: Credentials, publicKey: any, privateKey: any) {\n    this.credentials = credentials;\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n  }\n\n  /**\n   * @param {EncryptPayload} data\n   * @returns {T}\n   * \n   * @memberof Decryptor\n   */\n  decryptData<T>(data: EncryptPayload<T>): T {\n    const dataArrayCopy = JSON.parse(JSON.stringify(data.dataArray));\n\n    data.encryptionParameters.forEach(x => {\n      jp.apply(dataArrayCopy, this.addAsteriskToArrayInPath(x.jsonPath), val => {\n        return this.decryptVal(val, x.encryptionType);\n      });\n    });\n\n    return dataArrayCopy;\n  }\n\n  /**\n   * @param {string} value\n   * @param {EncryptionType} encryptionType\n   * @returns {string}\n   * \n   * @memberof Decryptor\n   */\n  decryptValue = (value: string, encryptionType: EncryptionType): string => {\n    const decryptedValue = this.decryptVal(value, encryptionType);\n    return decryptedValue;\n  }\n\n  /**\n   * @param {*} data \n   * @param {EncryptionParameter} encryptionParameters \n   * @returns {string[]} \n   * \n   * @memberof Decryptor\n   */\n  getDecryptedValuesForPath(data: any, encryptionParameters: EncryptionParameter): string[] {\n    if(!encryptionParameters) {\n      throw Error('You have to provide encryptionParameters as second argument');\n    }\n    \n    const dataCopy = JSON.parse(JSON.stringify(data));\n    const decryptedValues = jp.query(dataCopy, this.addAsteriskToArrayInPath(encryptionParameters.jsonPath))\n                              .map(x => this.decryptVal(x, encryptionParameters.encryptionType));\n\n    return decryptedValues;\n  }\n\n  /**\n   * @param {any} val\n   * @param {string} encryptionType\n   * @returns {string}\n   * \n   * @private\n   * @memberof Decryptor\n   */\n  private decryptVal = (val: any, encryptionType: string): string => {\n    switch(encryptionType) {\n      case 'AES':\n        return AES.decrypt(val, enc.Base64.parse(this.credentials.AES.key), { mode: mode.ECB }).toString(enc.Utf8);\n\n      case 'PAILLIER':\n        return this.privateKey.decrypt(new BigInteger(val.toString())).toString(10);\n        \n      default:\n        return val;\n    }\n  }\n\n  /**\n   * @param {string} path\n   * @returns {string}\n   * \n   * @private\n   * @memberof Decryptor\n   */\n  private addAsteriskToArrayInPath = (path: string): string => path.replace('[]', '[*]');\n}\n\nexport default Decryptor;\n\n\n// WEBPACK FOOTER //\n// ./lib/Decryptor.ts","module.exports = require(\"jsonpath\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jsonpath\"\n// module id = 7\n// module chunks = 0","module.exports = require(\"crypto-js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"crypto-js\"\n// module id = 8\n// module chunks = 0","import * as axios from 'axios';\nimport { Credentials, AxiosResponse, EncryptPayload, Config } from './model';\n\n/**\n * \n * @class ApiClient\n */\nexport abstract class ApiClient {\n  config: Config;\n  public static headers: object = {};\n\n  /**\n   * Creates an instance of ApiClient.\n   * @param {any} config \n   * @memberof ApiClient\n   */\n  constructor(config) {\n    this.config = config;\n  }\n\n  /**\n   * Create crypto configuration\n   * @returns {Promise<AxiosResponse<Credentials>>}\n   * \n   * @memberof ApiClient\n   */\n  createCryptoConfiguration = (): Promise<AxiosResponse<Credentials>> => {\n    return axios.post(`${this.config.baseUrl}/morfina/api/v1/configuration/${this.config.webApiKey}/create`, null, { headers: ApiClient.headers });\n  }\n\n  /**\n   * Get crypto configuration\n   * @returns {Promise<AxiosResponse<Credentials>>}\n   * \n   * @memberof ApiClient\n   */\n  getCryptoConfiguration = (): Promise<AxiosResponse<Credentials>> => {\n    return axios.get(`${this.config.baseUrl}/morfina/api/v1/configuration/${this.config.webApiKey}`, { headers: ApiClient.headers });\n  }\n\n  /**\n   * Encrypt data\n   * @param {EncryptPayload} payload\n   * @returns {Promise<AxiosResponse<EncryptPayload>>}\n   * \n   * @memberof ApiClient\n   */\n  encryptData<T>(payload: EncryptPayload<T>): Promise<AxiosResponse<EncryptPayload<T>>> {\n    return axios.post(`${this.config.baseUrl}/morfina/api/v1/encrypt`, payload, { headers: ApiClient.headers })\n  }\n}\n\nexport default class Client extends ApiClient {\n  constructor(config) {\n    super(config);\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/ApiClient.ts","module.exports = require(\"axios\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"axios\"\n// module id = 10\n// module chunks = 0","const isObjectEmpty = (obj: object) => Object.keys(obj).length === 0 && obj.constructor === Object;\n\nexport { isObjectEmpty }\n\n\n// WEBPACK FOOTER //\n// ./lib/utils.ts"],"sourceRoot":""}