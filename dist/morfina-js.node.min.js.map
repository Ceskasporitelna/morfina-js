{"version":3,"sources":["webpack:///morfina-js.node.min.js","webpack:///webpack/bootstrap ce5a2252d767d43b9b3f","webpack:///./src/index.ts","webpack:///./src/Client.ts","webpack:///./lib/paillier.js","webpack:///external \"jsbn\"","webpack:///./lib/rng.js","webpack:///./src/Computer.ts","webpack:///./src/Decryptor.ts","webpack:///external \"jsonpath\"","webpack:///external \"crypto-js\"","webpack:///./src/ApiClient.ts","webpack:///external \"axios\"","webpack:///./src/utils.ts"],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Object","defineProperty","value","Client_1","default","paillier","jsbn_1","Computer_1","Decryptor_1","ApiClient_1","utils_1","MorfinaClient","config","credentials","_this","this","precompute","numberOfPrimes","computer","add","value1","value2","multiply","num","decryptValue","encryptionType","decryptor","apiClient","pub","publicKey","PAILLIER","bits","BigInteger","n","priv","privateKey","lambda","prototype","morph","payload","payloadWithApiKeys","encryptionParameters","map","x","webAPIKey","webApiKey","dataArray","encryptData","decryptData","data","getDecryptedValuesForPath","getClient","client","Error","getCryptoConfiguration","then","resp","isObjectEmpty","createCryptoConfiguration","undefined","lcm","a","b","divide","gcd","SecureRandom","n2","square","np1","ONE","rncache","Array","pubkey","modPow","subtract","modInverse","generateKeys","modulusbits","q","keys","rng","isProbablePrime","testBit","compareTo","sec","encrypt","randomize","mod","remainder","mult","rn","length","pop","getRN","r","i","push","decrypt","require","Arcfour","j","S","ARC4init","key","t","ARC4next","prng_newstate","rng_seed_int","rng_pool","rng_pptr","rng_psize","rng_seed_time","Date","getTime","rng_get_byte","rng_state","init","next","rng_get_bytes","ba","window","navigator","crypto","getRandomValues","ua","Uint8Array","appName","appVersion","z","random","charCodeAt","Math","floor","nextBytes","Computer","Promise","resolve","getEncryptedBigIntegerFromValue","toString","val","bigInt","jp","crypto_js_1","Decryptor","decryptedValue","decryptVal","AES","enc","Base64","parse","mode","ECB","Utf8","addAsteriskToArrayInPath","path","replace","dataArrayCopy","JSON","stringify","forEach","apply","jsonPath","dataCopy","decryptedValues","query","__extends","extendStatics","setPrototypeOf","__proto__","d","hasOwnProperty","__","constructor","create","axios","ApiClient","post","baseUrl","headers","get","Client","_super","obj"],"mappings":"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","file":"morfina-js.node.min.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar Client_1 = __webpack_require__(1);\n\texports.default = Client_1.default;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar paillier = __webpack_require__(2);\n\tvar jsbn_1 = __webpack_require__(3);\n\tvar Computer_1 = __webpack_require__(5);\n\tvar Decryptor_1 = __webpack_require__(6);\n\tvar ApiClient_1 = __webpack_require__(9);\n\tvar utils_1 = __webpack_require__(11);\n\t/**\n\t * MorfinaClient\n\t *\n\t * @class MorfinaClient\n\t */\n\tvar MorfinaClient = /** @class */ (function () {\n\t    /**\n\t     * Creates an instance of MorfinaClient.\n\t     * @param {Config} config\n\t     * @param {Credentials} credentials\n\t     *\n\t     * @memberof MorfinaClient\n\t     */\n\t    function MorfinaClient(config, credentials) {\n\t        var _this = this;\n\t        /**\n\t         * Precompute values to make future invokations of encrypt significantly faster.\n\t         * @param {number} numberOfPrimes\n\t         * @returns {Promise<any>}\n\t         *\n\t         * @memberof MorfinaClient\n\t         */\n\t        this.precompute = function (numberOfPrimes) {\n\t            return _this.computer.precompute(numberOfPrimes);\n\t        };\n\t        /**\n\t         * Returns sum of value1 and value2\n\t         * @param {string|number} value1\n\t         * @param {string|number} value2\n\t         * @returns {string}\n\t         *\n\t         * @memberof MorfinaClient\n\t         */\n\t        this.add = function (value1, value2) {\n\t            return _this.computer.add(value1, value2);\n\t        };\n\t        /**\n\t         * Returns multiplication of value by num\n\t         * @param {string} value\n\t         * @param {number} num\n\t         * @returns {string}\n\t         *\n\t         * @memberof MorfinaClient\n\t         */\n\t        this.multiply = function (value, num) {\n\t            return _this.computer.multiply(value, num);\n\t        };\n\t        /**\n\t         * @param {string} value\n\t         * @param {EncryptionType} encryptionType\n\t         * @returns {Promise<string>}\n\t         *\n\t         * @memberof Decryptor\n\t         */\n\t        this.decryptValue = function (value, encryptionType) {\n\t            return _this.decryptor.decryptValue(value, encryptionType);\n\t        };\n\t        this.config = config;\n\t        this.credentials = credentials;\n\t        this.apiClient = new ApiClient_1.default(config);\n\t        var pub = new paillier.publicKey(credentials.PAILLIER.publicKey.bits, new jsbn_1.BigInteger(credentials.PAILLIER.publicKey.n));\n\t        var priv = new paillier.privateKey(new jsbn_1.BigInteger(credentials.PAILLIER.privateKey.lambda), pub);\n\t        this.computer = new Computer_1.default(pub, priv);\n\t        this.decryptor = new Decryptor_1.default(this.credentials, pub, priv);\n\t    }\n\t    /**¨\n\t     * Calls Morfina server with payload where data are encrypted and sent back\n\t     * @param {EncryptPayloadWithoutApiKeys} payload\n\t     * @returns {Promise<AxiosResponse<any>>}\n\t     *\n\t     * @memberof MorfinaClient\n\t     */\n\t    MorfinaClient.prototype.morph = function (payload) {\n\t        var _this = this;\n\t        var payloadWithApiKeys = {\n\t            encryptionParameters: payload.encryptionParameters.map(function (x) {\n\t                x.webAPIKey = _this.config.webApiKey;\n\t                return x;\n\t            }),\n\t            dataArray: payload.dataArray,\n\t        };\n\t        return this.apiClient.encryptData(payloadWithApiKeys);\n\t    };\n\t    /**\n\t     * Returns decrypted data that is passed in encrypted\n\t     * @param {EncryptPayload} data\n\t     * @returns {Promise<any>}\n\t     *\n\t     * @memberof MorfinaClient\n\t     */\n\t    MorfinaClient.prototype.decryptData = function (data) {\n\t        return this.decryptor.decryptData(data);\n\t    };\n\t    /**\n\t     * @param {*} data\n\t     * @param {EncryptionParameter} encryptionParameters\n\t     * @returns {Promise<string[]>}\n\t     *\n\t     * @memberof Decryptor\n\t     */\n\t    MorfinaClient.prototype.getDecryptedValuesForPath = function (data, encryptionParameters) {\n\t        return this.decryptor.getDecryptedValuesForPath(data, encryptionParameters);\n\t    };\n\t    /**\n\t     * Calls Morfina API for crypto and returns \"instance\" of MorfinaClient with crypto\n\t     * @param {Config} config\n\t     * @returns {Promise<MorfinaClient>}\n\t     *\n\t     * @static\n\t     * @memberof MorfinaClient\n\t     */\n\t    MorfinaClient.getClient = function (config) {\n\t        var client = new ApiClient_1.default(config);\n\t        if (!config) {\n\t            throw Error('You have to pass credentials to MorfinaClient');\n\t        }\n\t        return client.getCryptoConfiguration()\n\t            .then(function (resp) {\n\t            if (!utils_1.isObjectEmpty(resp.data)) {\n\t                client = undefined;\n\t                return new MorfinaClient(config, resp.data);\n\t            }\n\t            return client.createCryptoConfiguration()\n\t                .then(function (resp) {\n\t                client = undefined;\n\t                return new MorfinaClient(config, resp.data);\n\t            });\n\t        });\n\t    };\n\t    return MorfinaClient;\n\t}());\n\texports.default = MorfinaClient;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t////////////////////////////////////////////////////////////////////////////////////\n\t//\n\t// paillier.js: a simple proof-of-concept Javascript implementation of the\n\t// Paillier homomorphic encryption system.\n\t//\n\t// Author: Maarten H. Everts (TNO)\n\t//\n\t// Dependencies: jsbn, from http://www-cs-students.stanford.edu/~tjw/jsbn/\n\t//  (you will need at least jsbn.js, jsbn2.js, prng4.js, and rng.js)\n\t// See the demo page on how to use it.\n\t//\n\t////////////////////////////////////////////////////////////////////////////////////\n\tvar BigInteger = __webpack_require__(3).BigInteger;\n\t\n\tvar SecureRandom = __webpack_require__(4);\n\t\n\tfunction lcm(a,b) {\n\t  return a.multiply(b).divide(a.gcd(b));\n\t}\n\t\n\tpaillier = {\n\t\tpublicKey: function(bits, n) {\n\t\t\t// bits\n\t\t\tthis.bits = bits;\n\t\t\t// n\n\t\t\tthis.n = n;\n\t\t\t// n2 (cached n^2)\n\t\t\tthis.n2 = n.square();\n\t\t\t// np1 (cached n+1)\n\t\t\tthis.np1 = n.add(BigInteger.ONE);\n\t\t\tthis.rncache = new Array();\n\t\t},\n\t\tprivateKey: function(lambda, pubkey) {\n\t\t\t// lambda\n\t\t\tthis.lambda = lambda;\n\t\t\tthis.pubkey = pubkey;\n\t\t\t// x (cached) for decryption\n\t\t\tthis.x = pubkey.np1.modPow(this.lambda,pubkey.n2).subtract(BigInteger.ONE).divide(pubkey.n).modInverse(pubkey.n);\n\t\t},\n\t\tgenerateKeys: function(modulusbits) {\n\t\t\tvar p, q, n, keys = {}, rng = new SecureRandom();\n\t\t\tdo {\n\t\t\t\tdo {\n\t\t\t\t\tp = new BigInteger(modulusbits>>1,1,rng);\n\t\t\t\t} while (!p.isProbablePrime(10));\n\t\n\t\t\t\tdo {\n\t\t\t\t\tq = new BigInteger(modulusbits>>1,1,rng);\n\t\t\t\t} while(!q.isProbablePrime(10));\n\t\n\t\t\t\tn = p.multiply(q);\n\t\t\t} while(!(n.testBit(modulusbits - 1)) || (p.compareTo(q) == 0));\n\t\t\tkeys.pub = new paillier.publicKey(modulusbits,n);\n\t\t\tlambda = lcm(p.subtract(BigInteger.ONE),q.subtract(BigInteger.ONE));\n\t\t\tkeys.sec = new paillier.privateKey(lambda, keys.pub);\n\t\t\treturn keys;\n\t\t}\n\t}\n\t\n\t\n\tpaillier.publicKey.prototype = {\n\t\tencrypt: function(m) {\n\t\t\treturn this.randomize(this.n.multiply(m).add(BigInteger.ONE).mod(this.n2));\n\t\t},\n\t\tadd: function(a,b) {\n\t\t\treturn a.multiply(b).remainder(this.n2);\n\t\t},\n\t\tmult: function(a,b) {\n\t\t\treturn a.modPow(b, this.n2);\n\t\t},\n\t\trandomize: function(a) {\n\t\t\tvar rn;\n\t\t\tif (this.rncache.length > 0) {\n\t\t\t\trn = this.rncache.pop();\n\t\t\t} else {\n\t\t\t\trn = this.getRN();\n\t\t\t}\n\t\t\treturn (a.multiply(rn)).mod(this.n2);\n\t\t},\n\t\tgetRN: function() {\n\t\t\tvar r, rng = new SecureRandom();\n\t\t\tdo {\n\t\t\t\tr = new BigInteger(this.bits,rng);\n\t\t\t\t// make sure r <= n\n\t\t\t} while(r.compareTo(this.n) >= 0);\n\t\t\treturn r.modPow(this.n, this.n2);\n\t\t},\n\t\t// Precompute values to make future invokations of encrypt and randomize (significantly) faster.\n\t\t// n is the number of precomputed values.\n\t\tprecompute: function(n) {\n\t\t\tfor (var i = 0; i < n; i++) {\n\t\t\t\tthis.rncache.push(this.getRN());\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpaillier.privateKey.prototype = {\n\t\tdecrypt: function(c) {\n\t\t\treturn c.modPow(this.lambda,this.pubkey.n2).subtract(BigInteger.ONE).divide(this.pubkey.n).multiply(this.x).mod(this.pubkey.n);\n\t\t}\n\t}\n\t\n\tmodule.exports = paillier;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"jsbn\");\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n\t// Random number generator - requires a PRNG backend, e.g. prng4.js\n\t\n\t\n\t// prng4.js - uses Arcfour as a PRNG\n\t\n\tfunction Arcfour() {\n\t  this.i = 0;\n\t  this.j = 0;\n\t  this.S = new Array();\n\t}\n\t\n\t// Initialize arcfour context from key, an array of ints, each from [0..255]\n\tfunction ARC4init(key) {\n\t  var i, j, t;\n\t  for(i = 0; i < 256; ++i)\n\t    this.S[i] = i;\n\t  j = 0;\n\t  for(i = 0; i < 256; ++i) {\n\t    j = (j + this.S[i] + key[i % key.length]) & 255;\n\t    t = this.S[i];\n\t    this.S[i] = this.S[j];\n\t    this.S[j] = t;\n\t  }\n\t  this.i = 0;\n\t  this.j = 0;\n\t}\n\t\n\tfunction ARC4next() {\n\t  var t;\n\t  this.i = (this.i + 1) & 255;\n\t  this.j = (this.j + this.S[this.i]) & 255;\n\t  t = this.S[this.i];\n\t  this.S[this.i] = this.S[this.j];\n\t  this.S[this.j] = t;\n\t  return this.S[(t + this.S[this.i]) & 255];\n\t}\n\t\n\tArcfour.prototype.init = ARC4init;\n\tArcfour.prototype.next = ARC4next;\n\t\n\t// Plug in your RNG constructor here\n\tfunction prng_newstate() {\n\t  return new Arcfour();\n\t}\n\t\n\t// Pool size must be a multiple of 4 and greater than 32.\n\t// An array of bytes the size of the pool will be passed to init()\n\tvar rng_psize = 256;\n\t\n\t\n\t// For best results, put code like\n\t// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n\t// in your main HTML document.\n\t\n\tvar rng_state;\n\tvar rng_pool;\n\tvar rng_pptr;\n\tvar window = {}\n\tvar navigator = {}\n\t// Mix in a 32-bit integer into the pool\n\tfunction rng_seed_int(x) {\n\t  rng_pool[rng_pptr++] ^= x & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n\t  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n\t}\n\t\n\t// Mix in the current time (w/milliseconds) into the pool\n\tfunction rng_seed_time() {\n\t  rng_seed_int(new Date().getTime());\n\t}\n\t\n\t// Initialize the pool with junk if needed.\n\tif(rng_pool == null) {\n\t  rng_pool = new Array();\n\t  rng_pptr = 0;\n\t  var t;\n\t  if(window && window.crypto && window.crypto.getRandomValues) {\n\t    // Use webcrypto if available\n\t    var ua = new Uint8Array(32);\n\t    window.crypto.getRandomValues(ua);\n\t    for(t = 0; t < 32; ++t)\n\t      rng_pool[rng_pptr++] = ua[t];\n\t  }\n\t  if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\" && window.crypto) {\n\t    // Extract entropy (256 bits) from NS4 RNG if available\n\t    var z = window.crypto.random(32);\n\t    for(t = 0; t < z.length; ++t)\n\t      rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n\t  }\n\t  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n\t    t = Math.floor(65536 * Math.random());\n\t    rng_pool[rng_pptr++] = t >>> 8;\n\t    rng_pool[rng_pptr++] = t & 255;\n\t  }\n\t  rng_pptr = 0;\n\t  rng_seed_time();\n\t  //rng_seed_int(window.screenX);\n\t  //rng_seed_int(window.screenY);\n\t}\n\t\n\tfunction rng_get_byte() {\n\t  if(rng_state == null) {\n\t    rng_seed_time();\n\t    rng_state = prng_newstate();\n\t    rng_state.init(rng_pool);\n\t    for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n\t      rng_pool[rng_pptr] = 0;\n\t    rng_pptr = 0;\n\t    //rng_pool = null;\n\t  }\n\t  // TODO: allow reseeding after first request\n\t  return rng_state.next();\n\t}\n\t\n\tfunction rng_get_bytes(ba) {\n\t  var i;\n\t  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n\t}\n\t\n\tfunction SecureRandom() {}\n\t\n\tSecureRandom.prototype.nextBytes = rng_get_bytes;\n\t\n\tmodule.exports = SecureRandom;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar jsbn_1 = __webpack_require__(3);\n\t/**\n\t *\n\t *\n\t * @class Computer\n\t */\n\tvar Computer = /** @class */ (function () {\n\t    /**\n\t     * Creates an instance of Computer.\n\t     * @param {Credentials} credentials\n\t     * @memberof Computer\n\t     */\n\t    function Computer(publicKey, privateKey) {\n\t        var _this = this;\n\t        /**\n\t         * Precompute values to make future invokations of encrypt significantly faster.\n\t         * @param {number} numberOfPrimes\n\t         * @returns {Promise<any>}\n\t         *\n\t         * @memberof Computer\n\t         */\n\t        this.precompute = function (numberOfPrimes) {\n\t            return Promise.resolve(_this.publicKey.precompute(numberOfPrimes));\n\t        };\n\t        /**\n\t         * Returns sum of value1 and value2\n\t         * @param {string|number} value1\n\t         * @param {string|number} value2\n\t         * @returns {string}\n\t         *\n\t         * @memberof Computer\n\t         */\n\t        this.add = function (value1, value2) {\n\t            return _this.publicKey.add(_this.getEncryptedBigIntegerFromValue(value1), _this.getEncryptedBigIntegerFromValue(value2)).toString();\n\t        };\n\t        /**\n\t         * Returns multiplication of value by num\n\t         * @param {string|number} value\n\t         * @param {number} num\n\t         * @returns {string}\n\t         *\n\t         * @memberof Computer\n\t         */\n\t        this.multiply = function (value, num) {\n\t            return _this.publicKey.mult(_this.getEncryptedBigIntegerFromValue(value), new jsbn_1.BigInteger(num.toString(), 10)).toString();\n\t        };\n\t        this.encrypt = function (x) { return _this.getEncryptedBigIntegerFromValue(x).toString(); };\n\t        /**\n\t         * If passed in value is string then it assumes that passed in value is encrypted so it creates BigInteger.\n\t         * If passed in values is number then in returns decrypted BigInteger.\n\t         * @param {string | number} val\n\t         * @returns {BigInteger}\n\t         *\n\t         * @private\n\t         * @memberof Computer\n\t         */\n\t        this.getEncryptedBigIntegerFromValue = function (val) {\n\t            if (typeof val === 'string') {\n\t                return new jsbn_1.BigInteger(val, 10);\n\t            }\n\t            if (typeof val === 'number') {\n\t                var bigInt = new jsbn_1.BigInteger(val.toString(), 10);\n\t                return _this.publicKey.encrypt(bigInt);\n\t            }\n\t            throw Error('Input must be number or string');\n\t        };\n\t        this.publicKey = publicKey;\n\t        this.privateKey = privateKey;\n\t    }\n\t    return Computer;\n\t}());\n\texports.default = Computer;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar jp = __webpack_require__(7);\n\tvar crypto_js_1 = __webpack_require__(8);\n\tvar jsbn_1 = __webpack_require__(3);\n\t/**\n\t *\n\t *\n\t * @class Decryptor\n\t */\n\tvar Decryptor = /** @class */ (function () {\n\t    /**\n\t     * Creates an instance of Decryptor.\n\t     * @param {Credentials} credentials\n\t     * @param {*} publicKey\n\t     * @param {*} privateKey\n\t     * @memberof Decryptor\n\t     */\n\t    function Decryptor(credentials, publicKey, privateKey) {\n\t        var _this = this;\n\t        /**\n\t         * @param {string} value\n\t         * @param {EncryptionType} encryptionType\n\t         * @returns {Promise<string>}\n\t         *\n\t         * @memberof Decryptor\n\t         */\n\t        this.decryptValue = function (value, encryptionType) {\n\t            var decryptedValue = _this.decryptVal(value, encryptionType);\n\t            return Promise.resolve(decryptedValue);\n\t        };\n\t        /**\n\t         * @param {any} val\n\t         * @param {string} encryptionType\n\t         * @returns {string}\n\t         *\n\t         * @private\n\t         * @memberof Decryptor\n\t         */\n\t        this.decryptVal = function (val, encryptionType) {\n\t            switch (encryptionType) {\n\t                case 'AES':\n\t                    return crypto_js_1.AES.decrypt(val, crypto_js_1.enc.Base64.parse(_this.credentials.AES.key), { mode: crypto_js_1.mode.ECB }).toString(crypto_js_1.enc.Utf8);\n\t                case 'PAILLIER':\n\t                    return _this.privateKey.decrypt(new jsbn_1.BigInteger(val.toString())).toString(10);\n\t                default:\n\t                    return val;\n\t            }\n\t        };\n\t        /**\n\t         * @param {string} path\n\t         * @returns {string}\n\t         *\n\t         * @private\n\t         * @memberof Decryptor\n\t         */\n\t        this.addAsteriskToArrayInPath = function (path) { return path.replace('[]', '[*]'); };\n\t        this.credentials = credentials;\n\t        this.publicKey = publicKey;\n\t        this.privateKey = privateKey;\n\t    }\n\t    /**\n\t     * @param {EncryptPayload} data\n\t     * @returns {Promise<any>}\n\t     *\n\t     * @memberof Decryptor\n\t     */\n\t    Decryptor.prototype.decryptData = function (data) {\n\t        var _this = this;\n\t        var dataArrayCopy = JSON.parse(JSON.stringify(data.dataArray));\n\t        data.encryptionParameters.forEach(function (x) {\n\t            jp.apply(dataArrayCopy, _this.addAsteriskToArrayInPath(x.jsonPath), function (val) {\n\t                return _this.decryptVal(val, x.encryptionType);\n\t            });\n\t        });\n\t        return Promise.resolve(dataArrayCopy);\n\t    };\n\t    /**\n\t     * @param {*} data\n\t     * @param {EncryptionParameter} encryptionParameters\n\t     * @returns {Promise<string[]>}\n\t     *\n\t     * @memberof Decryptor\n\t     */\n\t    Decryptor.prototype.getDecryptedValuesForPath = function (data, encryptionParameters) {\n\t        var _this = this;\n\t        if (!encryptionParameters) {\n\t            throw Error('You have to provide encryptionParameters as second argument');\n\t        }\n\t        var dataCopy = JSON.parse(JSON.stringify(data));\n\t        var decryptedValues = jp.query(dataCopy, this.addAsteriskToArrayInPath(encryptionParameters.jsonPath))\n\t            .map(function (x) { return _this.decryptVal(x, encryptionParameters.encryptionType); });\n\t        return Promise.resolve(decryptedValues);\n\t    };\n\t    return Decryptor;\n\t}());\n\texports.default = Decryptor;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"jsonpath\");\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"crypto-js\");\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar axios = __webpack_require__(10);\n\t/**\n\t *\n\t * @class ApiClient\n\t */\n\tvar ApiClient = /** @class */ (function () {\n\t    /**\n\t     * Creates an instance of ApiClient.\n\t     * @param {any} config\n\t     * @memberof ApiClient\n\t     */\n\t    function ApiClient(config) {\n\t        var _this = this;\n\t        /**\n\t         * Create crypto configuration\n\t         * @returns {Promise<AxiosResponse<Credentials>>}\n\t         *\n\t         * @memberof ApiClient\n\t         */\n\t        this.createCryptoConfiguration = function () {\n\t            return axios.post(_this.config.baseUrl + \"/morfina/api/v1/configuration/\" + _this.config.webApiKey + \"/create\", null, { headers: ApiClient.headers });\n\t        };\n\t        /**\n\t         * Get crypto configuration\n\t         * @returns {Promise<AxiosResponse<Credentials>>}\n\t         *\n\t         * @memberof ApiClient\n\t         */\n\t        this.getCryptoConfiguration = function () {\n\t            return axios.get(_this.config.baseUrl + \"/morfina/api/v1/configuration/\" + _this.config.webApiKey, { headers: ApiClient.headers });\n\t        };\n\t        this.config = config;\n\t    }\n\t    /**\n\t     * Encrypt data\n\t     * @param {EncryptPayload} payload\n\t     * @returns {Promise<AxiosResponse<EncryptPayload>>}\n\t     *\n\t     * @memberof ApiClient\n\t     */\n\t    ApiClient.prototype.encryptData = function (payload) {\n\t        return axios.post(this.config.baseUrl + \"/morfina/api/v1/encrypt\", payload, { headers: ApiClient.headers });\n\t    };\n\t    ApiClient.headers = {};\n\t    return ApiClient;\n\t}());\n\texports.ApiClient = ApiClient;\n\tvar Client = /** @class */ (function (_super) {\n\t    __extends(Client, _super);\n\t    function Client(config) {\n\t        return _super.call(this, config) || this;\n\t    }\n\t    return Client;\n\t}(ApiClient));\n\texports.default = Client;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"axios\");\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar isObjectEmpty = function (obj) { return Object.keys(obj).length === 0 && obj.constructor === Object; };\n\texports.isObjectEmpty = isObjectEmpty;\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// morfina-js.node.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ce5a2252d767d43b9b3f","import MorfinaClient from './Client';\n\nexport default MorfinaClient;\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import * as axios from 'axios';\nimport * as paillier from '../lib/paillier';\nimport { BigInteger } from 'jsbn';\nimport {\n  Config,\n  Credentials,\n  AxiosResponse,\n  EncryptPayload,\n  EncryptPayloadWithoutApiKeys,\n  EncryptionParameterWithApiKey,\n  EncryptionParameter,\n  EncryptionType,\n} from './model';\nimport Computer from './Computer';\nimport Decryptor from './Decryptor';\nimport ApiClient from './ApiClient';\nimport { isObjectEmpty } from './utils';\n\n/**\n * MorfinaClient\n * \n * @class MorfinaClient\n */\nclass MorfinaClient {\n  config: Config;\n  computer: Computer;\n  decryptor: Decryptor;\n  credentials: Credentials;\n  apiClient: ApiClient;\n\n  /**\n   * Creates an instance of MorfinaClient.\n   * @param {Config} config \n   * @param {Credentials} credentials\n   * \n   * @memberof MorfinaClient\n   */\n  constructor(config: Config, credentials: Credentials) {\n    this.config = config;\n    this.credentials = credentials;\n    this.apiClient = new ApiClient(config);\n    \n    const pub = new paillier.publicKey(credentials.PAILLIER.publicKey.bits, new BigInteger(credentials.PAILLIER.publicKey.n));\n    const priv = new paillier.privateKey(new BigInteger(credentials.PAILLIER.privateKey.lambda), pub);\n\n    this.computer = new Computer(pub, priv);\n    this.decryptor = new Decryptor(this.credentials, pub, priv);\n  }\n\n  /**\n   * Calls Morfina API for crypto and returns \"instance\" of MorfinaClient with crypto\n   * @param {Config} config\n   * @returns {Promise<MorfinaClient>}\n   * \n   * @static\n   * @memberof MorfinaClient\n   */\n  static getClient = (config: Config): Promise<MorfinaClient> => {\n    let client = new ApiClient(config);\n\n    if (!config) {\n      throw Error('You have to pass credentials to MorfinaClient');\n    }\n\n    return client.getCryptoConfiguration()\n      .then((resp) => {\n        if(!isObjectEmpty(resp.data)) {\n          client = undefined;\n          return new MorfinaClient(config, resp.data) as any;\n        }\n\n        return client.createCryptoConfiguration()\n          .then(resp => {\n            client = undefined;\n            return new MorfinaClient(config, resp.data);\n          });\n      });\n  }\n\n  /**¨\n   * Calls Morfina server with payload where data are encrypted and sent back\n   * @param {EncryptPayloadWithoutApiKeys} payload\n   * @returns {Promise<AxiosResponse<any>>}\n   * \n   * @memberof MorfinaClient\n   */\n  morph<T = any>(payload: EncryptPayloadWithoutApiKeys<T>): Promise<AxiosResponse<EncryptPayload<T>>> {\n    const payloadWithApiKeys = {\n      encryptionParameters: payload.encryptionParameters.map((x: EncryptionParameterWithApiKey) => {\n        x.webAPIKey = this.config.webApiKey;\n        return x;\n      }),\n      dataArray: payload.dataArray,\n    };\n\n    return this.apiClient.encryptData<T>(payloadWithApiKeys);\n  }\n\n  /**\n   * Precompute values to make future invokations of encrypt significantly faster.\n   * @param {number} numberOfPrimes\n   * @returns {Promise<any>}\n   * \n   * @memberof MorfinaClient\n   */\n  precompute = (numberOfPrimes: number): Promise<any> => {\n    return this.computer.precompute(numberOfPrimes);\n  }\n\n  /**\n   * Returns sum of value1 and value2\n   * @param {string|number} value1\n   * @param {string|number} value2\n   * @returns {string}\n   * \n   * @memberof MorfinaClient\n   */\n  add = (value1: string | number, value2: string | number): string => {\n    return this.computer.add(value1, value2);\n  }\n\n  /**\n   * Returns multiplication of value by num\n   * @param {string} value\n   * @param {number} num\n   * @returns {string}\n   * \n   * @memberof MorfinaClient\n   */\n  multiply = (value: string | number, num: number): string => {\n    return this.computer.multiply(value, num);\n  }\n\n  /**\n   * Returns decrypted data that is passed in encrypted\n   * @param {EncryptPayload} data\n   * @returns {Promise<any>}\n   * \n   * @memberof MorfinaClient\n   */\n  decryptData<T = any>(data: EncryptPayload<T>): Promise<T> {\n    return this.decryptor.decryptData(data);\n  }\n\n  /**\n   * @param {string} value\n   * @param {EncryptionType} encryptionType\n   * @returns {Promise<string>}\n   * \n   * @memberof Decryptor\n   */\n  decryptValue = (value: string, encryptionType: EncryptionType): Promise<string> => {\n    return this.decryptor.decryptValue(value, encryptionType);\n  }\n\n  /**\n   * @param {*} data \n   * @param {EncryptionParameter} encryptionParameters \n   * @returns {Promise<string[]>} \n   * \n   * @memberof Decryptor\n   */\n  getDecryptedValuesForPath<T = any>(data: T, encryptionParameters: EncryptionParameter): Promise<string[]> {\n    return this.decryptor.getDecryptedValuesForPath(data, encryptionParameters);\n  }\n}\n\nexport default MorfinaClient;\n\n\n// WEBPACK FOOTER //\n// ./src/Client.ts","////////////////////////////////////////////////////////////////////////////////////\n//\n// paillier.js: a simple proof-of-concept Javascript implementation of the\n// Paillier homomorphic encryption system.\n//\n// Author: Maarten H. Everts (TNO)\n//\n// Dependencies: jsbn, from http://www-cs-students.stanford.edu/~tjw/jsbn/\n//  (you will need at least jsbn.js, jsbn2.js, prng4.js, and rng.js)\n// See the demo page on how to use it.\n//\n////////////////////////////////////////////////////////////////////////////////////\nvar BigInteger = require('jsbn').BigInteger;\n\nvar SecureRandom = require('./rng');\n\nfunction lcm(a,b) {\n  return a.multiply(b).divide(a.gcd(b));\n}\n\npaillier = {\n\tpublicKey: function(bits, n) {\n\t\t// bits\n\t\tthis.bits = bits;\n\t\t// n\n\t\tthis.n = n;\n\t\t// n2 (cached n^2)\n\t\tthis.n2 = n.square();\n\t\t// np1 (cached n+1)\n\t\tthis.np1 = n.add(BigInteger.ONE);\n\t\tthis.rncache = new Array();\n\t},\n\tprivateKey: function(lambda, pubkey) {\n\t\t// lambda\n\t\tthis.lambda = lambda;\n\t\tthis.pubkey = pubkey;\n\t\t// x (cached) for decryption\n\t\tthis.x = pubkey.np1.modPow(this.lambda,pubkey.n2).subtract(BigInteger.ONE).divide(pubkey.n).modInverse(pubkey.n);\n\t},\n\tgenerateKeys: function(modulusbits) {\n\t\tvar p, q, n, keys = {}, rng = new SecureRandom();\n\t\tdo {\n\t\t\tdo {\n\t\t\t\tp = new BigInteger(modulusbits>>1,1,rng);\n\t\t\t} while (!p.isProbablePrime(10));\n\n\t\t\tdo {\n\t\t\t\tq = new BigInteger(modulusbits>>1,1,rng);\n\t\t\t} while(!q.isProbablePrime(10));\n\n\t\t\tn = p.multiply(q);\n\t\t} while(!(n.testBit(modulusbits - 1)) || (p.compareTo(q) == 0));\n\t\tkeys.pub = new paillier.publicKey(modulusbits,n);\n\t\tlambda = lcm(p.subtract(BigInteger.ONE),q.subtract(BigInteger.ONE));\n\t\tkeys.sec = new paillier.privateKey(lambda, keys.pub);\n\t\treturn keys;\n\t}\n}\n\n\npaillier.publicKey.prototype = {\n\tencrypt: function(m) {\n\t\treturn this.randomize(this.n.multiply(m).add(BigInteger.ONE).mod(this.n2));\n\t},\n\tadd: function(a,b) {\n\t\treturn a.multiply(b).remainder(this.n2);\n\t},\n\tmult: function(a,b) {\n\t\treturn a.modPow(b, this.n2);\n\t},\n\trandomize: function(a) {\n\t\tvar rn;\n\t\tif (this.rncache.length > 0) {\n\t\t\trn = this.rncache.pop();\n\t\t} else {\n\t\t\trn = this.getRN();\n\t\t}\n\t\treturn (a.multiply(rn)).mod(this.n2);\n\t},\n\tgetRN: function() {\n\t\tvar r, rng = new SecureRandom();\n\t\tdo {\n\t\t\tr = new BigInteger(this.bits,rng);\n\t\t\t// make sure r <= n\n\t\t} while(r.compareTo(this.n) >= 0);\n\t\treturn r.modPow(this.n, this.n2);\n\t},\n\t// Precompute values to make future invokations of encrypt and randomize (significantly) faster.\n\t// n is the number of precomputed values.\n\tprecompute: function(n) {\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\tthis.rncache.push(this.getRN());\n\t\t}\n\t}\n}\n\npaillier.privateKey.prototype = {\n\tdecrypt: function(c) {\n\t\treturn c.modPow(this.lambda,this.pubkey.n2).subtract(BigInteger.ONE).divide(this.pubkey.n).multiply(this.x).mod(this.pubkey.n);\n\t}\n}\n\nmodule.exports = paillier;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/paillier.js\n// module id = 2\n// module chunks = 0","module.exports = require(\"jsbn\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jsbn\"\n// module id = 3\n// module chunks = 0","// Random number generator - requires a PRNG backend, e.g. prng4.js\n\n\n// prng4.js - uses Arcfour as a PRNG\n\nfunction Arcfour() {\n  this.i = 0;\n  this.j = 0;\n  this.S = new Array();\n}\n\n// Initialize arcfour context from key, an array of ints, each from [0..255]\nfunction ARC4init(key) {\n  var i, j, t;\n  for(i = 0; i < 256; ++i)\n    this.S[i] = i;\n  j = 0;\n  for(i = 0; i < 256; ++i) {\n    j = (j + this.S[i] + key[i % key.length]) & 255;\n    t = this.S[i];\n    this.S[i] = this.S[j];\n    this.S[j] = t;\n  }\n  this.i = 0;\n  this.j = 0;\n}\n\nfunction ARC4next() {\n  var t;\n  this.i = (this.i + 1) & 255;\n  this.j = (this.j + this.S[this.i]) & 255;\n  t = this.S[this.i];\n  this.S[this.i] = this.S[this.j];\n  this.S[this.j] = t;\n  return this.S[(t + this.S[this.i]) & 255];\n}\n\nArcfour.prototype.init = ARC4init;\nArcfour.prototype.next = ARC4next;\n\n// Plug in your RNG constructor here\nfunction prng_newstate() {\n  return new Arcfour();\n}\n\n// Pool size must be a multiple of 4 and greater than 32.\n// An array of bytes the size of the pool will be passed to init()\nvar rng_psize = 256;\n\n\n// For best results, put code like\n// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n// in your main HTML document.\n\nvar rng_state;\nvar rng_pool;\nvar rng_pptr;\nvar window = {}\nvar navigator = {}\n// Mix in a 32-bit integer into the pool\nfunction rng_seed_int(x) {\n  rng_pool[rng_pptr++] ^= x & 255;\n  rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n  rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n  rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n}\n\n// Mix in the current time (w/milliseconds) into the pool\nfunction rng_seed_time() {\n  rng_seed_int(new Date().getTime());\n}\n\n// Initialize the pool with junk if needed.\nif(rng_pool == null) {\n  rng_pool = new Array();\n  rng_pptr = 0;\n  var t;\n  if(window && window.crypto && window.crypto.getRandomValues) {\n    // Use webcrypto if available\n    var ua = new Uint8Array(32);\n    window.crypto.getRandomValues(ua);\n    for(t = 0; t < 32; ++t)\n      rng_pool[rng_pptr++] = ua[t];\n  }\n  if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\" && window.crypto) {\n    // Extract entropy (256 bits) from NS4 RNG if available\n    var z = window.crypto.random(32);\n    for(t = 0; t < z.length; ++t)\n      rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n  }\n  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n    t = Math.floor(65536 * Math.random());\n    rng_pool[rng_pptr++] = t >>> 8;\n    rng_pool[rng_pptr++] = t & 255;\n  }\n  rng_pptr = 0;\n  rng_seed_time();\n  //rng_seed_int(window.screenX);\n  //rng_seed_int(window.screenY);\n}\n\nfunction rng_get_byte() {\n  if(rng_state == null) {\n    rng_seed_time();\n    rng_state = prng_newstate();\n    rng_state.init(rng_pool);\n    for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n      rng_pool[rng_pptr] = 0;\n    rng_pptr = 0;\n    //rng_pool = null;\n  }\n  // TODO: allow reseeding after first request\n  return rng_state.next();\n}\n\nfunction rng_get_bytes(ba) {\n  var i;\n  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n}\n\nfunction SecureRandom() {}\n\nSecureRandom.prototype.nextBytes = rng_get_bytes;\n\nmodule.exports = SecureRandom;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/rng.js\n// module id = 4\n// module chunks = 0","import * as paillier from '../lib/paillier';\nimport { BigInteger } from 'jsbn';\nimport { Credentials } from './model';\n\n/**\n * \n * \n * @class Computer\n */\nclass Computer {\n  private publicKey: any;\n  private privateKey: any;\n\n  /**\n   * Creates an instance of Computer.\n   * @param {Credentials} credentials \n   * @memberof Computer\n   */\n  constructor(publicKey, privateKey) {\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n  }\n\n  /**\n   * Precompute values to make future invokations of encrypt significantly faster.\n   * @param {number} numberOfPrimes\n   * @returns {Promise<any>}\n   * \n   * @memberof Computer\n   */\n  precompute = (numberOfPrimes: number): Promise<any> => {\n    return Promise.resolve(this.publicKey.precompute(numberOfPrimes));\n  }\n\n  /**\n   * Returns sum of value1 and value2\n   * @param {string|number} value1\n   * @param {string|number} value2\n   * @returns {string}\n   * \n   * @memberof Computer\n   */\n  add = (value1: string | number, value2: string | number): string => {\n    return this.publicKey.add(\n      this.getEncryptedBigIntegerFromValue(value1),\n      this.getEncryptedBigIntegerFromValue(value2)\n    ).toString();\n  }\n\n  /**\n   * Returns multiplication of value by num\n   * @param {string|number} value\n   * @param {number} num\n   * @returns {string}\n   * \n   * @memberof Computer\n   */\n  multiply = (value: string | number, num: number): string => {\n    return this.publicKey.mult(\n      this.getEncryptedBigIntegerFromValue(value),\n      new BigInteger(num.toString(), 10)\n    ).toString();\n  }\n\n  encrypt = (x) => this.getEncryptedBigIntegerFromValue(x).toString();\n\n  /**\n   * If passed in value is string then it assumes that passed in value is encrypted so it creates BigInteger.\n   * If passed in values is number then in returns decrypted BigInteger.\n   * @param {string | number} val\n   * @returns {BigInteger}\n   * \n   * @private\n   * @memberof Computer\n   */\n  private getEncryptedBigIntegerFromValue = (val: string | number): string => {\n    if (typeof val === 'string') {\n      return new BigInteger(val, 10);\n    }\n\n    if (typeof val === 'number') {\n      const bigInt = new BigInteger(val.toString(), 10);\n      return this.publicKey.encrypt(bigInt);\n    }\n\n    throw Error('Input must be number or string');\n  }\n}\n\nexport default Computer;\n\n\n// WEBPACK FOOTER //\n// ./src/Computer.ts","import * as jp from 'jsonpath';\nimport { AES, enc, mode, pad } from 'crypto-js';\nimport { BigInteger } from 'jsbn';\nimport { Credentials, EncryptPayload, EncryptionParameter, EncryptionType } from './model';\n\n/**\n * \n * \n * @class Decryptor\n */\nclass Decryptor {\n  private credentials: Credentials;\n  private publicKey: any;\n  private privateKey: any;\n\n  /**\n   * Creates an instance of Decryptor.\n   * @param {Credentials} credentials \n   * @param {*} publicKey \n   * @param {*} privateKey \n   * @memberof Decryptor\n   */\n  constructor(credentials: Credentials, publicKey: any, privateKey: any) {\n    this.credentials = credentials;\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n  }\n\n  /**\n   * @param {EncryptPayload} data\n   * @returns {Promise<any>}\n   * \n   * @memberof Decryptor\n   */\n  decryptData<T>(data: EncryptPayload<T>): Promise<T> {\n    const dataArrayCopy = JSON.parse(JSON.stringify(data.dataArray));\n\n    data.encryptionParameters.forEach(x => {\n      jp.apply(dataArrayCopy, this.addAsteriskToArrayInPath(x.jsonPath), val => {\n        return this.decryptVal(val, x.encryptionType);\n      });\n    });\n\n    return Promise.resolve(dataArrayCopy);\n  }\n\n  /**\n   * @param {string} value\n   * @param {EncryptionType} encryptionType\n   * @returns {Promise<string>}\n   * \n   * @memberof Decryptor\n   */\n  decryptValue = (value: string, encryptionType: EncryptionType): Promise<string> => {\n    const decryptedValue = this.decryptVal(value, encryptionType);\n    return Promise.resolve(decryptedValue);\n  }\n\n  /**\n   * @param {*} data \n   * @param {EncryptionParameter} encryptionParameters \n   * @returns {Promise<string[]>} \n   * \n   * @memberof Decryptor\n   */\n  getDecryptedValuesForPath(data: any, encryptionParameters: EncryptionParameter): Promise<string[]> {\n    if(!encryptionParameters) {\n      throw Error('You have to provide encryptionParameters as second argument');\n    }\n    \n    const dataCopy = JSON.parse(JSON.stringify(data));\n    const decryptedValues = jp.query(dataCopy, this.addAsteriskToArrayInPath(encryptionParameters.jsonPath))\n                              .map(x => this.decryptVal(x, encryptionParameters.encryptionType));\n\n    return Promise.resolve(decryptedValues);\n  }\n\n  /**\n   * @param {any} val\n   * @param {string} encryptionType\n   * @returns {string}\n   * \n   * @private\n   * @memberof Decryptor\n   */\n  private decryptVal = (val: any, encryptionType: string): string => {\n    switch(encryptionType) {\n      case 'AES':\n        return AES.decrypt(val, enc.Base64.parse(this.credentials.AES.key), { mode: mode.ECB }).toString(enc.Utf8);\n\n      case 'PAILLIER':\n        return this.privateKey.decrypt(new BigInteger(val.toString())).toString(10);\n        \n      default:\n        return val;\n    }\n  }\n\n  /**\n   * @param {string} path\n   * @returns {string}\n   * \n   * @private\n   * @memberof Decryptor\n   */\n  private addAsteriskToArrayInPath = (path: string): string => path.replace('[]', '[*]');\n}\n\nexport default Decryptor;\n\n\n// WEBPACK FOOTER //\n// ./src/Decryptor.ts","module.exports = require(\"jsonpath\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jsonpath\"\n// module id = 7\n// module chunks = 0","module.exports = require(\"crypto-js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"crypto-js\"\n// module id = 8\n// module chunks = 0","import * as axios from 'axios';\nimport { Credentials, AxiosResponse, EncryptPayload, Config } from './model';\n\n/**\n * \n * @class ApiClient\n */\nexport abstract class ApiClient {\n  config: Config;\n  public static headers: object = {};\n\n  /**\n   * Creates an instance of ApiClient.\n   * @param {any} config \n   * @memberof ApiClient\n   */\n  constructor(config) {\n    this.config = config;\n  }\n\n  /**\n   * Create crypto configuration\n   * @returns {Promise<AxiosResponse<Credentials>>}\n   * \n   * @memberof ApiClient\n   */\n  createCryptoConfiguration = (): Promise<AxiosResponse<Credentials>> => {\n    return axios.post(`${this.config.baseUrl}/morfina/api/v1/configuration/${this.config.webApiKey}/create`, null, { headers: ApiClient.headers });\n  }\n\n  /**\n   * Get crypto configuration\n   * @returns {Promise<AxiosResponse<Credentials>>}\n   * \n   * @memberof ApiClient\n   */\n  getCryptoConfiguration = (): Promise<AxiosResponse<Credentials>> => {\n    return axios.get(`${this.config.baseUrl}/morfina/api/v1/configuration/${this.config.webApiKey}`, { headers: ApiClient.headers });\n  }\n\n  /**\n   * Encrypt data\n   * @param {EncryptPayload} payload\n   * @returns {Promise<AxiosResponse<EncryptPayload>>}\n   * \n   * @memberof ApiClient\n   */\n  encryptData<T>(payload: EncryptPayload<T>): Promise<AxiosResponse<EncryptPayload<T>>> {\n    return axios.post(`${this.config.baseUrl}/morfina/api/v1/encrypt`, payload, { headers: ApiClient.headers })\n  }\n}\n\nexport default class Client extends ApiClient {\n  constructor(config) {\n    super(config);\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/ApiClient.ts","module.exports = require(\"axios\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"axios\"\n// module id = 10\n// module chunks = 0","const isObjectEmpty = (obj: object) => Object.keys(obj).length === 0 && obj.constructor === Object;\n\nexport { isObjectEmpty }\n\n\n// WEBPACK FOOTER //\n// ./src/utils.ts"],"sourceRoot":""}